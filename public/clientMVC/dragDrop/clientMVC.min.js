/** 
 *easyFormGenerator 
 *Version 1.1.2 
 *Author : Erwan Datin (MacKentoch) 
 *Link: https://github.com/MacKentoch/easyFormGenerator 
 *License : MIT (2015) 
**/ 
;(function(){
'use strict';
/**
 *  -----------------------------------------------------------------------
 *  application module of the drag and drop version of easy form generator
 *  -----------------------------------------------------------------------
 *
 *  This version is not finished and is under heavy developments
 *  
 *   
 *     - do not use as production -
 *
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/

angular
  .module('ngwfApp', [
                        'ngwfApp.providers',	
												'ngwfApp.controllers',
												'ngwfApp.services', 
												'ngwfApp.filters',
												'ngwfApp.directives',
												'textAngular',
												'textAngularSetup',
												'ngAnimate',
												'toaster',											
												'formly', 
												'formlyBootstrap',
												'ui.bootstrap',
												'nya.bootstrap.select',
                        'dndLists',
                        'mgcrea.ngStrap.affix',
                        'ngTouch',
                        function(){}
	                     ])

  .value('easyFormGenVersion', 'v1.1.2');

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "controllers" container
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers" = container controller module
//
//  This module is a container -> it must be injected in the application -> so it will inject all controllers injected here
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular.module('ngwfApp.controllers', [	'ngwfApp.controllers.ngwfMainController',
										'ngwfApp.controllers.ngwfWfEditController',
										'ngwfApp.controllers.ngwfWfEditMODALController',							
										function () {
    //verbose
    //console.log('--> INIT : Hello controllers container  \'\'ngwfApp.controllers\'\' ');
}]);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "controllers"  for view "ngwfMainController"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.ngwfMainController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular
	.module('ngwfApp.controllers.ngwfMainController', [])
	.controller('ngwfMainController', [
		function () {
			
		}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  module = "controllers"  for view "edit/manage forms"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.viewNameController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular
  .module('ngwfApp.controllers.ngwfWfEditController', [])
  .controller('ngwfWfEditController', [	'$scope', 
                                        'easyFormGenVersion',
                                        '$filter',
                                        '$anchorScroll',
          															'toaster', 
          															'$timeout',
                                        '$modal',
                                        '$log', 
                                        'formFieldManage',
                                        'wfFormsByIdServices',
                                        'controllerModalProxy',
                                        'dragDropItemDecorationService',
                                        'dragDropConfig',
  function (	$scope, 
              easyFormGenVersion,
              $filter,
              $anchorScroll,
							toaster,
							$timeout, 
              $modal,
              $log, 
              formFieldManage, 
              wfFormsByIdServices, 
              controllerModalProxy,
              dragDropItemDecorationService,
              dragDropConfig) {

  $scope.easyFormGeneratorVERSION = easyFormGenVersion;
  ///////////////////////////////////////////////////
  // DEBUG model
  ///////////////////////////////////////////////////
  $scope.debug = {
                   showDebug : false,
                   configurationModelNumberofLines : 1
            };


  $scope.tab =  {
                  editTab : {active : true},
                  previewTab : {active : false},
                };


  ///////////////////////
  //formly control
  ///////////////////////
  $scope.vm = this;
  //model filled by form :
  $scope.vm.model = {};
  //form schema : (filled from $scope.configuration in each step)
  $scope.vm.wfFormFields = [];

  $scope.vm.wfFormFieldsOnlyNeededProperties = [];  

  $scope.ihm = {
                  preview : {
                                formlyModelViewExpanded : true,
                                formlyFieldsViewExpanded : true,
                                customizeFormButtonsExpanded : true,
                                saveThisFormExpanded : true  
                            }

  };

  ////////////////////////////
  //drag and drop models
  ////////////////////////////



  ////////////////////////////
  //init formly control list
  ////////////////////////////

  //needed for select : list all existing forms
  $scope.loadExistingFormsList = loadExistingFormsAsList();


  function loadExistingFormsAsList(){
    //If it were not a static html, it should call server to retrieve data from database :
    // $scope.formlyList = wfFormsByIdServices.query();
    // if ($scope.debug.showDebug ===true) {
    //   console.info('---> INIT : formlyList : ');
    //   console.dir($scope.formlyList); 
    // }     
  }

  //load on init
  loadExistingFormsAsList();


  $scope.previewLoadedForm = {fieldsModel:[]};
  $scope.configurationLoaded = {};

  $scope.previewExistingform = function(formlyform){

   var configlines = JSON.parse(formlyform.formlyField);
   //here to replace with $scope.configuration : initialise configuration with lines 
   $scope.configurationLoaded = {};
   formFieldManage.bindConfigurationLines($scope.configurationLoaded,configlines);

   formFieldManage.applyConfigurationToformlyModel($scope.configurationLoaded, $scope.previewLoadedForm.fieldsModel, $scope.vm.model);

   $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);

   $scope.previewLoadedForm.cancelButtonText = formlyform.cancelButtonText;
   $scope.previewLoadedForm.submitButtonText = formlyform.submitButtonText;
  };


  $scope.vm.onSubmit = onSubmit;
  
  
  function onSubmit() {
  
       toaster.pop({
            type: 'info',
            timeout:2000,
            title: 'should save data model if it were not a static example',
            body: 'data :' + $filter('json')($scope.vm.model, 4),                
            showCloseButton: true
      }); 

    //data model in console
    //console.dir($scope.vm.model);
  }


  
 //column ref                         
 $scope.numberOfColumns = 1;
 $scope.MaxNumberOfColumns = 3;
 $scope.MinNumberOfColumns = 1;


  ///////////////////////////////////////////////////
  // a column model template (to get an idea)
  ///////////////////////////////////////////////////
 //reference column object : addinding new column to configuration.line model = adding this object
 $scope.columnTemplate = {
                            numColumn: -1,
                            exist:true, 
                            control: {
                                        type:'none',
                                        key: 'none',
                                        subtype: 'none',
                                        // templateOptions: {
                                        //                     label: 'none',
                                        //                     placeholder: 'none',
                                        //                     required: false,
                                        //                     description: 'Descriptive text'
                                        //                   }
                                      }                                         
	                       };

  ///////////////////////////////////////////////////
  // a line model template (to get an idea)
  ///////////////////////////////////////////////////
 //reference line object : addinding new line to configuration model = adding this object
 $scope.lineTemplate = {
                        line:-1, 
                        activeColumn : 1,
                        columns: [
                                        {  
                                            numColumn: 1,
                                            exist:true, 
                                            control: {
                                                        type:'none',
                                                        key: 'none',
                                                        // templateOptions: {
                                                        //                     label: 'none',
                                                        //                     placeholder: 'none',
                                                        //                     required: false,
                                                        //                     description: 'Descriptive text'
                                                        //                   }
                                                      }
                                          }
                                  ]
 						};


  ///////////////////////////////////////////////////////////////////////////////////
  // configuration model (contains array of lines which contains array of columns)
  ///////////////////////////////////////////////////////////////////////////////////
  $scope.configuration = {};
  /**
   * formFieldManage.initConfigurationEditFromScratch(_OBJECT TO INIT_, _BOOL ADD STEP WAY PROPERTIES_)
   *
   * TODO : as it is drag and drop way : fix so that _BOOL ADD STEP WAY PROPERTIES_ = false works
   */
  formFieldManage.initConfigurationEditFromScratch($scope.configuration , true);
  //will leave when this controller is re-written for drag and drop
  console.info( [
                  'debug formFieldManage.initConfigurationEditFromScratch'
                ].join(' '));
  console.dir($scope.configuration);

  //init number of configuration lines
  $scope.resetToZeroModel = function(){
     $scope.configuration.activeLine = 1;

     if ($scope.configuration.lines.length > 1) {
        $scope.configuration.lines.splice(1, $scope.configuration.lines.length - 2);
     }
     return $scope.countConfigurationModelLines();
  };  



  ////////////////////////////////////////////////////////////
  //            line control (STEP 0)
  ////////////////////////////////////////////////////////////

  //return count configuration lines
  $scope.countConfigurationModelLines = function(){
  	//information in debug model
  	$scope.debug.configurationModelNumberofLines = $scope.configuration.lines.length;
  	return $scope.configuration.lines.length;
  };    
  //switch to line
  $scope.setActiveLineNumber = function(lineNumber){
  	if (lineNumber <= $scope.countConfigurationModelLines()) {
  		$scope.configuration.activeLine = lineNumber;
  	}
  };                

  $scope.upThisLine = function(indexLine){  	
  	if (indexLine > -1) {
  			if ($scope.configuration.lines[indexLine - 1]) {
  				var currentLineObj = $scope.configuration.lines[indexLine];
  				$scope.configuration.lines.splice(indexLine , 1);
  				$scope.configuration.lines.splice((indexLine - 1), 0, currentLineObj);  	
          //manage selected aciveLine
          $scope.configuration.activeLine = 1;
  			}
  	}
      //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);     
  };


  $scope.downThisLine = function(indexLine){
  	if (indexLine > -1) {
  			if ($scope.configuration.lines[indexLine + 1]) {
  				var currentLineObj = $scope.configuration.lines[indexLine];
  				$scope.configuration.lines.splice(indexLine , 1);
  				$scope.configuration.lines.splice((indexLine + 1), 0, currentLineObj);  
          //manage selected aciveLine
          $scope.configuration.activeLine = 1;
  			}
      }     
      //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model); 
    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);   
  };

  $scope.addNewline = function(){
  	var newNumberOfLines = $scope.configuration.lines.push(
															{
											                    line:-1, 
											                    activeColumn : 1,
											                    columns: [
											                                    {  
											                                        numColumn: 1,
											                                        exist:true, 
											                                        control: {
											                                                    type:'none',
											                                                    key: 'none',
											                                                    // templateOptions: {
											                                                    //                     label: 'none',
											                                                    //                     placeholder: 'none',
											                                                    //                     required: false,
											                                                    //                     description: 'Descriptive text'
											                                                    //                   }
											                                                  }
											                                      }
											                              ]
																}

		);
      //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);
    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields); 
  };

  //must be remove a line with index of line to delete
  $scope.removeThisLine = function(index){
  	if (index > -1) {
  		if ($scope.configuration.lines.length > 1) {
          //manage selected aciveLine
          if ($scope.configuration.activeLine === index + 1) {
            $scope.configuration.activeLine = 1;
          }
  	  		$scope.configuration.lines.splice(index, 1);
  		}else{
  	  		$timeout(function(){
  		        toaster.pop({
  		                type: 'warning',
  		                title: 'Last line' ,
  		                body: 'Can\'t delete the last line',                
  		                showCloseButton: true
  			        });
  		    }, 100); 
  		}

    //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);
    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);
  	}
  };

  ////////////////////////////////////////////////////////////
  //            columns control (STEP 1)
  ////////////////////////////////////////////////////////////

  $scope.increaseNumberOfColumns = function(){

  if ($scope.configuration.lines[$scope.configuration.activeLine -1].columns.length < $scope.MaxNumberOfColumns) {
  	var newNumberOfColumns = $scope.configuration.lines[$scope.configuration.activeLine -1].columns.push(
          																				{
          														                            numColumn: -1,
          														                            exist: true, 
          														                            control: {
          														                                        type:'none',
          														                                        key: 'none'
          														                                        // templateOptions: {
          														                                        //                     label: 'none',
          														                                        //                     placeholder: 'none',
          														                                        //                     required: false,
          														                                        //                     description: 'Descriptive text'
          														                                        //                   }
          														                                      }                                         
          																				 }																				
  																				);
  	
  	 $scope.configuration.lines[$scope.configuration.activeLine -1].columns[newNumberOfColumns - 1].numColumn = newNumberOfColumns; 
  }
     //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model); 

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);
};


  $scope.decreaseNumberOfColumns = function(indexLine, indexColumn){
  	if ($scope.configuration.lines[$scope.configuration.activeLine -1].columns.length > 1) {
  		$scope.configuration.lines[$scope.configuration.activeLine -1].columns.splice($scope.configuration.lines[$scope.configuration.activeLine -1].columns.length -1, 1);
  	}
    //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);  

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);  
  };




  ////////////////////////////////////////////////////////////
  //            components control (STEP 2)
  ////////////////////////////////////////////////////////////










  ////////////////////////////////////////////////////////////
  //             porperties control (STEP 3)
  ////////////////////////////////////////////////////////////

  $scope.saveThisForm = function(){
    if (typeof $scope.configuration.formName === 'undefined') {
    toaster.pop({
            type: 'warning',
            timeout:2000,
            title: 'Form name is undefined',
            body: 'Form has not been saved.',                
            showCloseButton: true
      });
      return false;
    }

    if ($scope.configuration.formName === '') {
    toaster.pop({
            type: 'warning',
            timeout:2000,
            title: 'Form name is required',
            body: 'Form has not been saved.',                
            showCloseButton: true
      });
      return false;
    }

  toaster.pop({
          type: 'wait',
          timeout:10000,
          title: 'Form is being saved',
          body: 'Wait.',                
          showCloseButton: true
    });

    var wfForm = new wfFormsByIdServices();
    var formSavingIsOK = true;

    wfForm.formName = $scope.configuration.formName;
    wfForm.submitButtonText = $scope.configuration.submitButtonText;
    wfForm.cancelButtonText = $scope.configuration.cancelButtonText;

    wfForm.formlyField = JSON.stringify($scope.configuration.lines); 

    // save to database here 
    // wfForm.$save()
    //             .then(function(res)  {    formSavingIsOK = true;    })
    //             .catch(function(req) { 
    //                                   toaster.clear();
    //                                   formSavingIsOK = false; 
    //                                   toaster.pop({
    //                                           type: 'error',
    //                                           timeout:2000,
    //                                           title: 'Error while saving form',
    //                                           body: 'Sorry, an Error occured while saving form.',                
    //                                           showCloseButton: true
    //                                     });
    //             })
    //             .finally(function()  { 
    //                                   if (formSavingIsOK === true) {
    //                                     toaster.clear();  
    //                                     toaster.pop({
    //                                             type: 'success',
    //                                             timeout:2000,
    //                                             title: 'Form is successfully saved',
    //                                             body: '',                
    //                                             showCloseButton: true
    //                                       });                                         
    //                                   }
    //              });

    toaster.clear();  
    toaster.pop({
            type: 'info',
            timeout:2000,
            title: 'Form would be saved if it were not a static example',
            body: '',                
            showCloseButton: true
      }); 
    return true;
  };






  ////////////////////////////////////////////////////////////
  //            modal : add control to column
  ////////////////////////////////////////////////////////////

  $scope.nyaSelect = {};
  controllerModalProxy.initNyaSelect($scope.nyaSelect);

  $scope.animationsEnabled = true;

  $scope.showModalAddCtrlToColumn = function (size, indexLine, numcolumn) {

    var modalInstance = $modal.open({
                                      animation: $scope.animationsEnabled,
                                      templateUrl: 'modalWfEdit.html', 
                                      controller: 'ngwfWfEditMODALController',
                                      size: 'lg',
                                      resolve: {
                                        nyaSelect: function () {
                                          return controllerModalProxy.getNyASelectFromSelectedLineColumn($scope.nyaSelect, $scope.configuration,indexLine, numcolumn);
                                        }
                                      }
    });


    modalInstance.result.then(function (modalAddCtrlModel) {
        controllerModalProxy.bindConfigurationModelFromModalReturn(indexLine, numcolumn, modalAddCtrlModel, $scope.configuration);
        formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);
        
        $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);
    }, function () {
      $log.info('Modal dismissed at: ' + new Date());
    });
  };




  $scope.toggleAnimation = function () {
    $scope.animationsEnabled = !$scope.animationsEnabled;
  };                            






  ////////////////////////////////////////////////////////////
  //   drag and drop : may move from this controller
  ////////////////////////////////////////////////////////////
 
  //specific Container dragoverCallback event
  $scope.dragoverCallbackContainer = function(parentparentIndex, parentIndex, index){
      //prevent container in layout column to be drag to control select contianer 
      if (index === 0) {
          return false;
      }
      return true;
  };


      
  $scope.dndItemMoved = function(parentParentIndex, parentIndex, itemIndex){
       // console.info('dndItemMoved'); 
       // console.dir(
       //      {
       //          _I_am : 'dndItemMoved',
       //          _ParentParentIndex : parentParentIndex,
       //          _ParentIndex : parentIndex,
       //          _index: itemIndex
       //      });

    //prevent item from first container to disapear when dropped on other container
    if (parentParentIndex > 0) {
      
        //console.info('dndItemMoved');
        $scope.model[parentParentIndex][parentIndex].splice(itemIndex, 1);

        //refresh all css items on column 1 (form)
        //dragDropItemDecorationService.updateCssClassWholeColumn($scope.model, 1);
    }
    
  };

  $scope.dragoverCallbackItems = function(ParentParentIndex, parentIndex, index, external){
       // console.info('dragoverCallbackItems'); 
       // console.dir(
       //      {
       //          _I_am : 'dragoverCallbackItems',
       //          external : external,
       //          _ParentParentIndex : ParentParentIndex,
       //          _ParentIndex : parentIndex,
       //          _index: index
       //      });
       
       //console.info('dragoverCallbackItems');
        //prevent items in layout column to be drag to control select  
        if (parentIndex === 0) {
            return false;
        }
        /**
         * apply css to all items on the row like if new item were already in (explains why "length + 1")
         */
        //var numberOfItems = $scope.model[parentIndex][index].length + 1;
        //dragDropItemDecorationService.applyCssClassWholeLine($scope.model, parentIndex, index, numberOfItems, 1);
        return true;

    };


  /**
   * disableItemDropIf prevent dropping on condition
   *
   * TODO : to replace in html : dnd-disable-if="items.length > 2"
   */
  $scope.disableItemDropIf = function(){

  };


  $scope.dropCallback = function(event, index, item, external, type, allowedType) {
      //$scope.logListEvent('dropped at', event, index, external, type);
     // console.info('dropCallback'); 
     // console.dir(
     //      {
     //          _I_am : 'dropCallback',
     //          event : event,
     //          index : index,
     //          item : item,
     //          external: external,
     //          type:type,
     //          allowedType:allowedType,
     //          model : $scope.model
     //      });            

      if (external) {
          if (allowedType === 'itemType' && !item.label) return false;
          if (allowedType === 'containerType' && !angular.isArray(item)) return false; 
      }

      return item;
  };


  /**
   * [dropCallbackItems description]
   * @param  {[type]} event                   [description]
   * @param  {[type]} index                   [description]
   * @param  {[type]} realIndex               [description]
   * @param  {[type]} parentIndex             [description]
   * @param  {[type]} parentParentIndex       [description]
   * @param  {[type]} parentParentParentIndex [description]
   * @param  {[type]} item                    [description]
   * @param  {[type]} external                [description]
   * @param  {[type]} type                    [description]
   * @param  {[type]} allowedType             [description]
   * @return {[type]}                         [description]
   */
  $scope.dropCallbackItems = function(event, index, realIndex,parentIndex, parentParentIndex, parentParentParentIndex, item, external, type, allowedType){
     
     //console.info('dropCallbackItems');
     // console.info('dropCallbackItems'); 
     // console.dir(
     //      {
     //          _I_am : 'dropCallback',
     //          event : event,
     //          index : index,
     //          realIndex: realIndex,
     //          parentIndex: parentIndex,
     //          parentParentIndex: parentParentIndex,
     //          parentParentParentIndex: parentParentParentIndex,
     //          item : item,
     //          external: external,
     //          type:type,
     //          allowedType:allowedType,
     //          model : $scope.model,
     //          line: $scope.model[parentIndex][realIndex]
     //      });            

     /**
      * 
      * UPDATE CSS CLASS TO ALL ITEMS IN SAME ROW
      */          
     //NOTE : length + 1 since current intem is not in the model right now :
     //var numberOfItems = $scope.model[parentIndex][realIndex].length + 1;
     // dragDropItemDecorationService.applyCssClassWholeLine($scope.model, parentIndex, realIndex, numberOfItems, 1);
     /**
      * 
      * UPDATE CSS CLASS ITEM BEFORE RETURNING IT
      * 
      */           
      //item.cssClass = dragDropItemDecorationService.getCssClassWhenNumberItemsInRowIs(numberOfItems);
    
      if (external) {
          if (allowedType === 'itemType' && !item.label) return false;
          if (allowedType === 'containerType' && !angular.isArray(item)) return false; 
      }
    
      //$scope.command.forceRefresh = true;

      return item;
  };


  /**
   * logEvent (was used in pair with logListEvent) - no more used
   */
  $scope.logEvent = function(message, event) {
      // console.log(message, '(triggered by the following', event.type, 'event)');
      // console.log(event);
  };
  /**
   * logListEvent - no more used
   */
  $scope.logListEvent = function(action, event, index, external, type) {
      var message = external ? 'External ' : '';
      message += type + ' element is ' + action + ' position ' + index;
      $scope.logEvent(message, event);
  };

  /**
   * removeThisLine event line deleted
   */
  $scope.removeThisLine = function(lineIndex){
    $scope.model[1].splice(lineIndex,1);
  };


  $scope.model = [];


  /**
   * easyFormDragDropProperties 
   *
   * configuration properties
   *
   * May move into a provider next
   */
  $scope.easyFormDragDropProperties = {
            dropZoneConfig : {
                                  decoration :    [
                                                      {
                                                          WhenIndex: 0,
                                                          ApplycssClass: 'col-md-4', 
                                                          fontAwesomeIcon: 'fa fa-level-up',
                                                          title: 'Drag control from here : '
                                                      },
                                                      {
                                                          WhenIndex: 1,
                                                          ApplycssClass: 'col-md-8', 
                                                          fontAwesomeIcon: 'fa fa-level-down',
                                                          title: 'Drop control into here : '
                                                      }
                                                  ],
                                  verboseMode : false


            },

            dropZoneCommand : {
                                insertNewLine : function(){
                                          $scope.model[1].push([]);
                                }  
            },

            containerConfig : {
                                  decoration :    [
                                                      {
                                                          WhenIndex: 0,
                                                          ApplycssClass: 'col-md-12', 
                                                          title: 'Headers : '
                                                      },
                                                      {
                                                          WhenIndex: 1,
                                                          ApplycssClass: 'col-md-12', 
                                                          title: 'Text inputs : '
                                                      },
                                                      {
                                                          WhenIndex: 2,
                                                          ApplycssClass : 'col-md-12',
                                                          title : 'textarea'
                                                      },
                                                      {
                                                          WhenIndex: 3,
                                                          ApplycssClass : 'col-md-12',
                                                          title : 'radio'
                                                      }                                                      

                                                  ],
                                  verboseMode : false, 
                                  collapseEnabled : true,
                                  collapseCtrl: [
                                                    {
                                                        atIndex : 0,
                                                        collapse : true
                                                    },
                                                    {
                                                        atIndex : 1,
                                                        collapse : true
                                                    }
                                                ]                                                                  
            },
            itemConfig : {
                                  verboseMode : false, 
                              }                  
  };


  $scope.easyFormDragDropItemCounters = [
                                          //1st column
                                          [
                                            //line1 
                                            {

                                            },
                                            {

                                            }


                                          ],
                                          //2nd column
                                          [
                                            {

                                            },

                                            {

                                            }
                                          ]
                                      ];

  //force item css refresh (used in drop event)
  $scope.command = {forceRefresh : false};  

  /**
   * Model just for dev
   *
   * next may move in a provider
   */
  //init  model
  $scope.model = [].concat([
                            [
                              [
                                {
                                  'label': [  
                                          '<div class="col-md-12">',
                                          '    <div class="form-group">',                                          
                                          '      <div class="">',
                                          '        <h2 class="text-center">Header</h2>',
                                          '        <hr/>',
                                          '      </div>',
                                          '    </div>',
                                          '</div>'
                                            ].join(''),
                                  //'label': '<p>label 3</p>',           
                                  'control': 'header',
                                  'cssClass': 'col-md-12'
                                },
                                {
                                    'label': [  
                                            '<div class="col-md-12">',
                                            '    <div class="form-group">',                                          
                                            '      <div class="">',
                                            '        <h4 class="text-center">SubTitle</h4>',
                                            '        <hr/>',
                                            '      </div>',
                                            '    </div>',
                                            '</div>'
                                              ].join(''),
                                    //'label': '<p>label 3</p>',           
                                    'control': 'subtitle',
                                    'cssClass': 'col-md-12'
                                  }
                              ],
                              [

                                {
                                  'label': [  
                                            '<div class="col-md-12">',
                                            '<div class="form-group">',
                                            '  <label for="inputText" class="control-label textControlLabel pull-left">',
                                            '   title <span class="textControlLabel ng-scope">*</span>',
                                            '  </label>',
                                            '  <div class="">',
                                            '    <input type="text"  class="form-control" id="inputText" placeholder="basic input">',
                                            '    <p class="help-block pull-left">Description</p>',
                                            '  </div>',
                                            '</div>',
                                            '</div>'
                                            ].join(''),
                                  //'label': '<p>label 3</p>',           
                                  'control': 'basicinput',
                                  'cssClass': 'col-md-12'
                                },                              
                                {
        
                                  'label': [
                                            '<div class="col-md-12">',
                                            '<div class="form-group">',
                                            '  <label for="inputText" class="control-label textControlLabel ng-binding pull-left">',
                                            '   title <span class="textControlLabel ng-scope">*</span>',
                                            '  </label>',
                                            '  <div class="">',
                                            '    <input type="password" class="form-control" id="inputText" placeholder="password input">',
                                            '    <p class="help-block ng-binding pull-left">Description</p>',
                                            '  </div>',
                                            '</div>',
                                            '</div>'

                                            ].join(''),

                                  'control': 'password',
                                  'cssClass': 'col-md-12'
                                }
                              ],
                              //texareas
                              [

                                {
                                  'label': [
                                              '<div class="col-md-12">',
                                              '    <div class="form-group">', 
                                              '      <label for="textArea" class="control-label textControlLabel pull-left">title<span class="textControlLabel">*</span></label>', 
                                              '      <div class="">',
                                              '        <textarea class="form-control dragItemtextarea" ng-model="model[options.key]" rows="1" id="textArea"></textarea>',
                                              '        <p class="help-block pull-left">description</p>',          
                                              '      </div>',
                                              '    </div>',                    
                                              '</div>'                                  
                                            ].join(''),
                                  'control': 'textarea',
                                  'cssClass': 'col-md-12'          
                                }

                              ],
                              //radios
                              [
                                {
                                  'label' : [
                                              '<div class="col-md-12">',        
                                              '  <div class="form-group">',
                                              '    <label for="vertRadio" class="control-label textControlLabel pull-left">title<span class="textControlLabel">*</span></label>',
                                              '    <div class="interligne"></div>',
                                              '    <div class="pull-left">',

                                              '      <div class="radio">',
                                              '        <label class="">',
                                              '          <input type="radio" name="optionsRadios" id="optionsRadio-0" value="verticalRadio0" checked="">',
                                              '          option1',
                                              '        </label>',
                                              '      </div><div class="radio">',
                                              '        <label class="">',
                                              '          <input type="radio" name="optionsRadios"  id="optionsRadio-1" value="verticalRadio1" checked="">',
                                              '          option2',
                                              '        </label>',
                                              '      </div>',
                                              '      <p class="help-block pull-left">description</p>',

                                              '    </div>',


                                              '  </div>',                            
                                              '</div>'
                                            ].join(''),
                                  'control': 'verticalradio',
                                  'cssClass': 'col-md-12'            
                                }
                              ]
                            ],
                            //column template :
                            [
                              //1st line
                              [
                                {
                                  'label': [  
                                          '<div class="col-md-12">',
                                          '    <div class="form-group">',                                          
                                          '      <div class="">',
                                          '        <h2 class="text-center">Header</h2>',
                                          '        <hr/>',
                                          '      </div>',
                                          '    </div>',
                                          '</div>'
                                            ].join(''),
                                  //'label': '<p>label 3</p>',           
                                  'control': 'label',
                                  'cssClass': 'col-md-12'
                                }
                              ], 
                              //second line                             
                              [
                                {
                                  'label': [  
                                            '<div class="col-md-12">',
                                            '<div class="form-group">',
                                            '  <label for="inputText" class="control-label textControlLabel pull-left">',
                                            '   title <span class="textControlLabel ng-scope">*</span>',
                                            '  </label>',
                                            '  <div class="">',
                                            '    <input type="text" class="form-control" id="inputText" placeholder="basic input">',
                                            '    <p class="help-block pull-left">Description</p>',
                                            '  </div>',
                                            '</div>',
                                            '</div>'
                                            ].join(''),
                                  //'label': '<p>label 3</p>',           
                                  'control': 'label',
                                  'cssClass': 'col-md-6'
                                },
                                // {
                                //   'label': 'label 3',
                                //   'control': 'label'
                                // },
                                {
                                  'label': [  
                                            '<div class="col-md-12">',
                                            '<div class="form-group">',
                                            '  <label for="inputText" class="control-label textControlLabel pull-left">',
                                            '   title <span class="textControlLabel ng-scope">*</span>',
                                            '  </label>',
                                            '  <div class="">',
                                            '    <input type="text" class="form-control" id="inputText" placeholder="basic input">',
                                            '    <p class="help-block pull-left">Description</p>',
                                            '  </div>',
                                            '</div>',
                                            '</div>'
                                            ].join(''),
                                  //'label': '<p>label 3</p>',           
                                  'control': 'label',
                                  'cssClass': 'col-md-6'
                                }
                              ]
                              

                            ]
                          ]
                          );


}]);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  module = "controllers"  for view "wfEdit"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.viewNameController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

angular
  .module('ngwfApp.controllers.ngwfWfEditMODALController', [])
  .controller('ngwfWfEditMODALController', [	'$scope', 
                                              '$modalInstance',
                                              'nyaSelect',
                                              'toaster' ,
                                              '$timeout',
                                              'selectOptionManage',
                                              'controllerModalProxy',
  function (	$scope, 
              $modalInstance, 
              nyaSelect, 
              toaster,
              $timeout,
              selectOptionManage,
              controllerModalProxy
            ){

  

var initOptionModel = {rows:[
                            ]
                  };

  ////////////////////////////////////////////
  // part : radio
  ///////////////////////////////////////////

  $scope.radioRowCollection = initOptionModel;
  $scope.newOptionRadio = {saisie: ''};


  function bindRadioFromNYA(){
    if ($scope.nyaSelect.temporyConfig.formlyOptions.length > 0) {
      for (var i = 0; i <= $scope.nyaSelect.temporyConfig.formlyOptions.length-1; i++){

            var newOption = {"option": $scope.nyaSelect.temporyConfig.formlyOptions[i].name,
                      "order": i,
                      "group": ""
                    };
            $scope.radioRowCollection.rows.push(newOption);
      }    
    }
  }

  function bindRadioToNya(){
    var resetNyASelectOptions = [];
    $scope.nyaSelect.temporyConfig.formlyOptions = resetNyASelectOptions;

    if ($scope.radioRowCollection.rows.length > 0) {

      for (var i = 0; i <= $scope.radioRowCollection.rows.length - 1; i++){
            var newOption = {"name": $scope.radioRowCollection.rows[i].option,
                      "value": i,
                      "group": ""
                    };
            $scope.nyaSelect.temporyConfig.formlyOptions.push(newOption);   
        }       
   }
  }

  $scope.addNewOptionRadio = function(){
    var result = selectOptionManage.addNewOptionRadio($scope.radioRowCollection, $scope.newOptionRadio.saisie);
    if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: '\''+ $scope.newOptionRadio.saisie + '\'' + ' cannot be added.',                
                  showCloseButton: true
            });
    }
    //reset input
    $scope.newOptionRadio = {saisie: ""};
  };

  $scope.removeRadioRow = function(index) {
      var result = selectOptionManage.removeOption($scope.radioRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Delete was cancelled.',                
                  showCloseButton: true
            });
      }      
    }; 

  $scope.upThisRadioRow = function(index){
      var result = selectOptionManage.upthisOption($scope.radioRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }       
  };                                    

  $scope.downThisRadioRow = function(index){
      var result = selectOptionManage.downthisOption($scope.radioRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }
  };



  ////////////////////////////////////////////
  // part : basic Select
  ///////////////////////////////////////////

  $scope.basicSelectRowCollection = initOptionModel;
  $scope.newOptionBasicSelect = {saisie: ""};


  function bindBasicSelectFromNYA(){
    // console.info('bindBasicSelectFromNYA');
    // console.dir($scope.nyaSelect.temporyConfig);

    if ($scope.nyaSelect.temporyConfig.formlyOptions.length > 0) {
      for (var i = 0; i <= $scope.nyaSelect.temporyConfig.formlyOptions.length-1; i++){

            var newOption = {"option": $scope.nyaSelect.temporyConfig.formlyOptions[i].name,
                      "order": i,
                      "group": ""
                    };
            $scope.basicSelectRowCollection.rows.push(newOption);
      }    
    }
  }

  function bindBasicSelectToNya(){
    var resetNyASelectOptions = [];
    $scope.nyaSelect.temporyConfig.formlyOptions = resetNyASelectOptions;
    if ($scope.basicSelectRowCollection.rows.length > 0) {
      for (var i = 0; i <= $scope.basicSelectRowCollection.rows.length - 1; i++){
            var newOption = {"name": $scope.basicSelectRowCollection.rows[i].option,
                      "value": i,
                      "group": ""
                    };
            $scope.nyaSelect.temporyConfig.formlyOptions.push(newOption);
        }      
   }
  }

  $scope.addNewOptionBasicSelect = function(){
    var result = selectOptionManage.addNewOptionBasicSelect($scope.basicSelectRowCollection, $scope.newOptionBasicSelect.saisie);
    if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: '\''+ $scope.newOptionBasicSelect.saisie + '\'' + ' cannot be added.',                
                  showCloseButton: true
            });
    }
    //reset input
    $scope.newOptionBasicSelect = {saisie: ""};
  };

  $scope.removeRow = function(index) {
      var result = selectOptionManage.removeOption($scope.basicSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Delete was cancelled.',                
                  showCloseButton: true
            });
      }      
    }; 

  $scope.upThisRow = function(index){
      var result = selectOptionManage.upthisOption($scope.basicSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }       
  };                                    

  $scope.downThisRow = function(index){
      var result = selectOptionManage.downthisOption($scope.basicSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }
  };


  ////////////////////////////////////////////
  // part : grouped Select
  ///////////////////////////////////////////

  $scope.groupedSelectRowCollection = initOptionModel;
  $scope.newOptionGroupedSelect = {saisie: ""};

  $scope.GroupedSelectGroups =    {
                                    list:[]
                                  };
  $scope.newGroupGroupedSelect = {saisie: ""};  
  $scope.groupSelectGroupClick = {showList : false};                                


  function bindGroupedSelectFromNYA(){
    if ($scope.nyaSelect.temporyConfig.formlyOptions.length > 0) {
      for (var i = 0; i <= $scope.nyaSelect.temporyConfig.formlyOptions.length-1; i++){
      //for (var i = $scope.nyaSelect.temporyConfig.formlyOptions.length - 1; i >= 0; i--) {

            var newOption = {"option": $scope.nyaSelect.temporyConfig.formlyOptions[i].name,
                      "order": i,
                      "group": $scope.nyaSelect.temporyConfig.formlyOptions[i].group
                    };
            $scope.groupedSelectRowCollection.rows.push(newOption);            
        }
        //grouplist : thx to lodash it is easy
        var filteredgroup = _.uniq(_.pluck($scope.groupedSelectRowCollection.rows, 'group'));
       angular.copy(filteredgroup, $scope.GroupedSelectGroups.list); 
       //console.dir($scope.GroupedSelectGroups.list);

    }
  }

  function bindGroupedSelectToNya(){
    $scope.nyaSelect.temporyConfig.formlyOptions = [];
    for (var i = 0; i <= $scope.groupedSelectRowCollection.rows.length - 1; i++){
          var newOption = {"name": $scope.groupedSelectRowCollection.rows[i].option,
                    "value": i,
                    "group": $scope.groupedSelectRowCollection.rows[i].group
                  };

          $scope.nyaSelect.temporyConfig.formlyOptions.push(newOption);
          
      }
      ///console.log('\n\n\n\n\n');
      //console.dir($scope.nyaSelect.temporyConfig.formlyOptions);
  }  

  $scope.showGroupListToChoose = function(){
    $scope.groupSelectGroupClick.showList = !$scope.groupSelectGroupClick.showList;
  };

  $scope.addNewGroupToGroupedSelect = function(){
    if ($scope.newGroupGroupedSelect.saisie !== "") {
      for (var i = $scope.GroupedSelectGroups.list.length - 1; i >= 0; i--) {
        if ($scope.GroupedSelectGroups.list[i] === $scope.newGroupGroupedSelect.saisie) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: 'Group already exists',
                  body: 'No group added.',                
                  showCloseButton: true
            });          
        }
        
      }
      $scope.GroupedSelectGroups.list.push($scope.newGroupGroupedSelect.saisie);

    }else{
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: 'Not a valid group to add',
                  body: 'No group added.',                
                  showCloseButton: true
            });

    }
    $scope.newGroupGroupedSelect.saisie = "";
  };


  $scope.addNewOptionGroupedSelect = function(){
    var result = selectOptionManage.addNewOptionGroupedSelect($scope.groupedSelectRowCollection, $scope.newOptionGroupedSelect.saisie, '');
    if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: '\''+ $scope.newOptionGroupedSelect.saisie + '\'' + ' cannot be added.',                
                  showCloseButton: true
            });
    }
    //bind nya : dont bind here $apply is not done fast enough
    //bindGroupedSelectToNya();
    //reset input
    $scope.newOptionGroupedSelect = {saisie: ""};
  };

  $scope.removeGroupedSelectRow = function(index) {
      var result = selectOptionManage.removeOption($scope.groupedSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Delete was cancelled.',                
                  showCloseButton: true
            });
      }   
    }; 

  $scope.upThisGroupedSelectRow = function(index){
      var result = selectOptionManage.upthisOption($scope.groupedSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      } 
  };                                    

  $scope.downThisGroupedSelectRow = function(index){
      var result = selectOptionManage.downthisOption($scope.groupedSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      } 

  };


  /////////////////////////////////////////////
  // init datetimepicker model
  /////////////////////////////////////////////
  $scope.demodt ={};

  $scope.today = function() {
    $scope.demodt.dt = new Date();
  };
  $scope.today();

  $scope.clear = function () {
    $scope.demodt.dt = null;
  };


  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();

    $scope.demodt.opened = true;
  };

  $scope.dateOptions = {
           formatYear: 'yy',
           startingDay: 1,
           showWeeks: true,
           initDate: null
  };

  $scope.demodt.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
  
  function initDatePicker(){
    $scope.nyaSelect.temporyConfig.datepickerPopup = $scope.demodt.formats[0];  
  }
  


  /////////////////////////////////////////////
  // init model from controller data
  /////////////////////////////////////////////
  $scope.nyaSelect = nyaSelect ;

  //console.dir($scope.nyaSelect);
  
  //selected control from  main controller applied to current selected control
  $scope.nyaSelect.selectedControl = $scope.nyaSelect.temporyConfig.selectedControl;


  //place nya-select to selection if not none :
   if (nyaSelect.selectedControl !== 'none') {
    for (var i = $scope.nyaSelect.controls.length - 1; i >= 0; i--) {
       if ($scope.nyaSelect.controls[i].id === nyaSelect.selectedControl) {
          //$scope.nyaSelect.selectedControl = nyaSelect.controls[i].id;
          $scope.modelNyaSelect = nyaSelect.controls[i];
       }
    }

    if ($scope.nyaSelect.selectedControl === "BasicSelect") {
      bindBasicSelectFromNYA();
    }

    if ($scope.nyaSelect.selectedControl === "GroupedSelect") {
      bindGroupedSelectFromNYA();
    } 

    if ($scope.nyaSelect.selectedControl === "Radio") {
      bindRadioFromNYA();
    }    

  }



  function resetTemporyConfig(){
    $scope.nyaSelect.temporyConfig = {
                                        formlyLabel: "", 
                                        formlyRequired: false, 
                                        formlyPlaceholder: "",
                                        formlyDesciption: "",
                                        formlyOptions: []
                                      };   
  }



  $scope.selectThisControl = function(controlName){
    $scope.nyaSelect.selectedControl = 'none';
    resetTemporyConfig();

    for (var i = $scope.nyaSelect.controls.length - 1; i >= 0; i--) {
       if ($scope.nyaSelect.controls[i].id === controlName) {
          $scope.nyaSelect.selectedControl = $scope.nyaSelect.controls[i].id;         
       }
    }

    if ($scope.nyaSelect.selectedControl === 'Date') {
      initDatePicker();
    }
  };



  /////////////////////////
  // modal buttons click
  /////////////////////////
  $scope.ok = function () {

    if ($scope.nyaSelect.selectedControl === "BasicSelect") {
      bindBasicSelectToNya();
    }

    if ($scope.nyaSelect.selectedControl === "GroupedSelect") {
      bindGroupedSelectToNya();
    }  

    if ($scope.nyaSelect.selectedControl === "Radio") {
      bindRadioToNya();
    }  

    //save config to control
    controllerModalProxy.applyConfigToSelectedControl($scope.nyaSelect);
    //return current model to parent controller :
    $modalInstance.close($scope.nyaSelect);

  };

  $scope.cancel = function () {
    $modalInstance.dismiss('cancel');
  };


}]);
/**
 *  ------------------------------------------------------
 *  directive : ngwfDdContentCounterDirective
 *  ------------------------------------------------------
 *
 *  return real item count (hidden item being dragged that stay on the line)
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
    .module('ngwfApp.directives.ngwfDdContentCounterDirective', [])
    .directive('ddContentCounter', ['dragDropItemCounterService', '$timeout',

    function(	dragDropItemCounterService, $timeout ){

  
    	return {
    		 scope: {
    		 	valueWhenPlaceholder: 	'@ddValueWhenPlaceholder',
    		 	valueWhendragging: 			'@ddValueWhenDragging',
    		 	fullModel : 						'=ddFullModel',
					currentIndex :       		'@ddContentCounterCurrentIndex',
          parentIndex :         	'@ddContentCounterParentIndex',
          forceRefresh: 					'=ddContentCounterForceCssRefresh' 
    		 }, 
    		
    		restrict: 'A', 
    		
    		link: function($scope, element) {
    			
    			var timer;

       		/**
       		 * watch children length change : to update css item class
       		 */
    			$scope.$watch(
				    function () { return element[0].children.length; },
				    function (newValue, oldValue) {
				      if (newValue !== oldValue) {

				        var newRealCount= 0;
				        var listClassForThisRow = [];

				        for (var i = element[0].children.length - 1; i >= 0; i--) {
				        	
				        	if(dragDropItemCounterService.isHtmlElementToCount(element[0].children[i].classList)){
				        		newRealCount++;
				        		listClassForThisRow.push( {item: i, isReal : true} );
				        	}else{
				        		listClassForThisRow.push( {item: i, isReal : false} );
				        	} 
				        }
				        $scope.contentRealCount = newRealCount;
				        /**
				         * a timer otherwise won't refresh everytime
				         */
				        timer = $timeout(function(){
					        dragDropItemCounterService.updateLineItemCss(	$scope.fullModel, 
					        																							listClassForThisRow, 
					        																							$scope.parentIndex, 
					        																							$scope.currentIndex, 
					        																							newRealCount
					        																						);				        	
				        }, 20);
				        
				      }
				    }
				  );

          /**
           * timer destruction to prevent from bad UI experience
           */
          $scope.$on('$destroy', function(){
                  console.warn('ddContentCounter timer destruction!');
                  $timeout.cancel(timer);
              }
          ); 
		  
    		}
    	};

    }]);
/**
 *  ------------------------------------------------------
 *  directive : ddDecorContainer
 *  ------------------------------------------------------
 *
 * - apply configuration to containers (or lines in layoutor group controls in control selection)
 *   - apply title (ONLY if group controls (left drop zone - index 0): text inputs group, lists...)
 *   - expand Bool (ONLY if group controls (left drop zone - index 0): text inputs group, lists...)
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
    .module('ngwfApp.directives.ngwfDdDecorContainerDirective', [])
    .directive('ddDecorContainer', [

    function(){

        var htmlTemplate   =    [
                                    '<div ng-click="collapseFct()">',
                                    '   <h6 ng-show="config.isEnabled" class="isCollapsableZone"><button class="btn btn-primary btn-xs"><span class="{{currentIconClass()}}"></span></button>&nbsp;{{currentTitle}}</h6>', 
                                    '</div>',
                                    '<div collapse="isCollapsed">', 
                                    '   <div id="ddDecorContainerWillTranscludeHere"></div>', 
                                    '</div>'
                                ].join(' ');

        return {
            scope:  {
                        'styleParam'    :   '=ddContainerProperties',
                         'verboseMode'  :   '@ddContainerVerboseMode',
                         'currentIndex' :   '@ddContainerCurrentIndex',
                    },
            restrict:   'A', 
            template:   htmlTemplate,
            transclude: true,
            controller: function($scope) {
                            $scope.config = {   
                                                isEnabled : false
                                            };

                            $scope.collapseFct = function(){
                                /**
                                 * won't collapse if not control selection columns 
                                 */
                                if ($scope.config.isEnabled) {
                                    $scope.isCollapsed = !$scope.isCollapsed;
                                }
                            };
                            /**
                             *  TODO (low priority) : make icon css configurable (provider)
                             */
                            $scope.icons = {
                                closedClass :   'glyphicon glyphicon-eye-open',
                                opened :        'glyphicon glyphicon-eye-close'
                            };

                            $scope.currentIconClass =  function(){
                                    if ($scope.isCollapsed) {
                                        return $scope.icons.closedClass;
                                    }else{
                                        return $scope.icons.opened;
                                    }
                            };
                        },

            link: function($scope, element, attrs, ctrl, transclude) {    
                
                var verboseModeActive   = $scope.verboseMode;
                var currentIndex        = $scope.currentIndex;
                $scope.isCollapsed      = false;

                /**
                 * verbose mode for developments only
                 */
                if (verboseModeActive !== '') {
                    var verbose = angular.lowercase(verboseModeActive);

                    if (verbose === 'true' || verbose === '1') {
                       console.dir(
                            {
                                whoAmI              :   'I am verbose from ddDecorContainer link',
                                verbodeMode         :   verbose,
                                ParentParentIndex   :   $scope.$parent.$parent.$index,
                                ParentIndex         :   $scope.$parent.$index,
                                currentIndex        :   currentIndex,
                                styleParam          :   $scope.styleParam
                            }
                        );
                    }                    
                }
                /**
                 * no header (no title, no collapse....) 
                 */
                $scope.config.isEnabled = false;

                 if (typeof currentIndex !== 'undefined') {
                    if (currentIndex !== '') {
                        /**
                         * specific 1st column 
                         */
                        if (currentIndex === '0') {
                            /**
                             * apply title  
                             */
                            if (typeof $scope.styleParam.title !== 'undefined') {

                                $scope.currentTitle     = $scope.styleParam.title;
                                $scope.config.isEnabled = true;
                            } 

                        }
                    }                    
                }
                /**
                 * prevent transclusion creating child scope 
                 * want to know more about what I'm talking about : check this nice tip on the subject :
                 * http://angular-tips.com/blog/2014/03/transclusion-and-scopes/        
                 */
                transclude($scope.$parent, function(contentClone){
                    /**
                     * transclusion will append content to '<div id="ddDecorContainerWillTranscludeHere"></div>' 
                     */
                    var childDiv = angular.element(element.children()[1]); 
                    childDiv.append(contentClone);
                });   
            }
        };

    }]);


/**
 *  ------------------------------------------------------
 *  directive : ddDecorDropZone
 *  ------------------------------------------------------
 *
 * apply configuration to drop zone (or columns = top level containers)
 *   - column role (control selection or drop zone as form layout)
 *   - apply title
 *   - apply font-awesome icon
 *   - OPTIONAL (DEV USE) : add 'dd-verbose-mode' attribute set to true or 1 to have versbose in console
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
    .module('ngwfApp.directives.ngwfDdDecorDropZoneDirective', [])
    .directive('ddDecorDropZone', [


    function(){

        var htmlTemplate   = ['<div class="{{styleParam.ApplycssClass}}">', 
                            '  <div id="visualPanel">',
                            '    <div  class="panel panel-default">', 
                            '      <div class="panel-heading">', 
                            '        <h3 class="panel-title">', 
                            '          <i class="{{currentFontAwesome}}"></i>&nbsp;', 
                            '          {{currentTitle}}', 
                            '           <div ng-show="headerConfig.HeaderButtonVisible">',
                            '             <button class="btn btn-primary btn-xs buttonHeaderAddNewLine center-block" ng-click="addNewLineFct();">',
                            '               <span class="glyphicon glyphicon-plus"></span>&nbsp;add new line',
                            '             </button>',
                            '           </div>',
                            '        </h3>', 
                            '      </div>', 
                            '      <div class="panel-body">', 
                            '         <div class="row">', 
                            '            <div class="col-md-12" ng-transclude>', 
                            '            </div>', 
                            '            </div>', 
                            '      </div>', 
                            '    </div>', 
                            '   </div>',
                            '</div>'].join(' ');

        
        return {
            scope:  {
                         'styleParam'       : '=ddDropZoneProperties',
                         'verboseMode'      : '@ddDropZoneVerboseMode',
                         'currentIndex'     : '@ddDropZoneCurrentIndex',
                         'addNewLineFct'    : '&ddDropZoneAddNewLine'
                    },
            restrict:   'A', 
            template:   htmlTemplate,
            transclude: true,

            link: function($scope) {    
                
                var verboseModeActive   = $scope.verboseMode;
                var currentIndex        = $scope.currentIndex;
                
                $scope.headerConfig = {
                    HeaderButtonVisible : false,
                    affixAttr           : 'bs-affix',
                    affixEnabled        : false
                };
                /**
                 * verbose mode : just for dev
                 */
                if (verboseModeActive !== '') {
                    var verbose = angular.lowercase(verboseModeActive);

                    if (verbose === 'true' || verbose === '1') {
                       console.dir(
                            {
                                whoAmI              : 'I am verbose from ddDecorDropZone link',
                                verbodeMode         : verbose,
                                ParentParentIndex   : $scope.$parent.$parent.$index,
                                ParentIndex         : $scope.$parent.$index,
                                currentIndex        : currentIndex,
                                styleParam          : $scope.styleParam
                            }
                        );
                    }                    
                }


                if (typeof currentIndex !== 'undefined') {
                    if (currentIndex !== '') {
                            /**
                             * apply title
                             */
                            if (typeof $scope.styleParam.title !== 'undefined') {
                                $scope.currentTitle = $scope.styleParam.title;
                            }

                            /**
                             * apply font-awesome
                             */
                            if (typeof $scope.styleParam.fontAwesomeIcon !== 'undefined') {
                                $scope.currentFontAwesome = $scope.styleParam.fontAwesomeIcon;
                            } 

                            /**
                             * show add new line button
                             */
                            if (currentIndex === '1') {
                                $scope.headerConfig.HeaderButtonVisible = true;
                            }

                    }                    
                }
                          
            }
        };
    }]);
/**
 *  ------------------------------------------------------
 *  directive : ngwfDdDecorItemDirective
 *  ------------------------------------------------------
 *
 *  decorate an item / control
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
    .module('ngwfApp.directives.ngwfDdDecorItemDirective', [])
    .directive('ddDecorItem', [ 'dragDropConfig',

    function( dragDropConfig ){

        var htmlTemplate   = [
                                '<div>',
                                ' <div id="itemDirectiveTranscludeHere"></div>',
                                '</div>',
                                ].join(' ');                                
                             
        return {
            scope:  {

                         'verboseMode' :        '@ddItemVerboseMode',
                         'currentIndex' :       '@ddItemCurrentIndex',
                         'parentIndex':         '@ddItemParentIndex',
                         'parentParentIndex':   '@ddItemParentParentIndex', 
                         'lineItemsCount' :     '@ddItemsCount',
                         'cssClass':            '@ddItemCssClass'
                    },
            restrict:   'A',
            template:   htmlTemplate,
            transclude: true,
            link: function($scope, element, attrs, ctrl, transclude) {    
                
                var verboseModeActive = $scope.verboseMode;
                var currentIndex      = $scope.currentIndex;
                var parentIndex       = $scope.parentIndex;
                var listClass         = dragDropConfig.getDistinctItemCssClass();


                /**
                 * init css class
                 */
                angular.forEach(listClass, function(css){
                    element.removeClass(css);
                });
                element.addClass($scope.cssClass);                


                /**
                 * update css class
                 */
                $scope.$watch('cssClass', function(newValue, oldValue) {
                    if(newValue !== oldValue){
                        /**
                         * just for debug 
                         */
                        // console.warn([
                        //                 '-from ddDecorItem-',
                        //                 'css apply :',
                        //                 newValue,
                        //                 'to column index',
                        //                 $scope.parentParentIndex,
                        //                 'and line index',
                        //                 parentIndex,
                        //                 'itemIndex',
                        //                 currentIndex,
                        //                 'innerText',
                        //                 element[0].innerText
                        //             ].join(' ')
                        //             );
                        
                        /**
                         * update css class
                         */
                        angular.forEach(listClass, function(css){
                            element.removeClass(css);
                        });
                        element.addClass(newValue); 
                    }
                    
                });

                /**
                 * verbose mode : just for dev 
                 */
                if (verboseModeActive !== '') {
                    var verbose = angular.lowercase(verboseModeActive);

                    if (verbose === 'true' || verbose === '1') {
                       console.dir(
                            {
                                whoAmI              : 'I am verbose from ddDecorItem directive link',
                                verbodeMode         : verbose,
                                ParentParentIndex   : $scope.$parent.$parent.$index,
                                ParentIndex         : parentIndex,
                                parentParentIndex   : $scope.parentParentIndex,
                                currentIndex        : currentIndex,
                                lineItemsCount      : $scope.lineItemsCount
                            }
                        );
                    }                    
                }

                /**
                 * control column : apply css class to item
                 */
                if ($scope.parentParentIndex === '0') {
                   element.addClass(listClass[0]);  

                }

                /**
                 * prevent transclusion creating child scope  
                 *
                 *
                 * NOTE :if you want to know more about what I'm saying : check this nice tip on the subject : 
                 * http://angular-tips.com/blog/2014/03/transclusion-and-scopes/        
                 */
                transclude($scope.$parent, function(contentClone){
                    /**
                     * transclusion will append content to '<div id="itemDirectiveTranscludeHere"></div>' 
                     */
                    var childDiv = angular.element(element.children()[0]); 
                    childDiv.append(contentClone);
                });   
            }
        };


    }]);


/**
 *  ------------------------------------------------------
 *  directive : ngwfDdDecorLineDirective
 *  ------------------------------------------------------
 *
 * decorate a form line :
 *  - double click will make it shake for 2 second (ready to delete state)
 *  - double click again will delete this line
 *  - no click within 2seconds : line will stop shaking 
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
    .module('ngwfApp.directives.ngwfDdDecorLineDirective', [])
    .directive('ddDecorLine', ['$timeout', 

    function($timeout){

        var htmlTemplate   = [
                                '<div ng-class="{confirmLineDelete : deleteLine.readyToDelete}" ng-dblclick="removeMe($event);" ng-click="cancelDelete($event);"> ',
                                ' <button ng-show="deleteLine.readyToDelete === true" type="button"  class="btn btn-danger pull-right buttonCloseLine" >',
                                '   <span class="glyphicon glyphicon-trash" aria-hidden="true"></span></button>',
                                '</div>',
                                '  <div id="lineDirectiveTranscludeHere"></<div>',
                                ].join(' ');
        
        return {
            scope:  {

                         'verboseMode'  :    '@ddLineVerboseMode',
                         'currentIndex' :    '@ddLineCurrentIndex',
                         'parentIndex'  :    '@ddLineParentIndex',
                         'removeLine'   :    '&ddRemoveLine'
                    },
            restrict:   'A',
            template:   htmlTemplate,
            transclude: true,

            link: function($scope, element, attrs, ctrl, transclude) {    
                
                var verboseModeActive   = $scope.verboseMode;
                var currentIndex        = $scope.currentIndex;
                var parentIndex         = $scope.parentIndex;

                $scope.deleteLine = {};
                $scope.deleteLine.readyToDelete = false;
                $scope.deleteLine.dblClickCount = 0;

        
                $scope.isCollapsed = false;


                /**
                 * verbose mode : just for dev 
                 */
                if (verboseModeActive !== '') {
                    var verbose = angular.lowercase(verboseModeActive);

                    if (verbose === 'true' || verbose === '1') {
                       console.dir(
                            {
                                whoAmI              : 'I am verbose from ddDecorLine directive link',
                                verbodeMode         : verbose,
                                ParentParentIndex   : $scope.$parent.$parent.$index,
                                ParentIndex         : parentIndex,
                                currentIndex        : currentIndex,
                            }
                        );
                    }                    
                }

                /**
                 * removeMe is function related to twice double click sequence to delete a line
                 *
                 *  - addClass / remove/class ; will make line in a shake movement
                 *  - call "removeLine function to delete the line (if it was rwice double clicked)
                 */
               $scope.removeMe= function(event){
                    event.preventDefault();
                    event.stopPropagation();

                    if ($scope.parentIndex === '1') {

                        /**
                         * 2nd dbl click : if is shaking so it is confirmation to delete
                         */
                        if ($scope.deleteLine.dblClickCount === 1){

                            $scope.deleteLine.dblClickCount = 0;
                            $scope.deleteLine.readyToDelete = false;

                            /**
                             * NOTE : trick in calling parent controller function with input param when directive with isolate scope
                             * see : https://thinkster.io/egghead/isolate-scope-am
                             *
                             * Here should be:
                             * 
                             *-> in html :                     dd-remove-line="removeThisLine(indexToDelete)
                             *-> in controller :               $scope.removeThisLine = function(lineIndex){
                             *-> so in directive call it  :    $scope.removeLine({indexToDelete: currentIndex});
                             *
                             *
                             *
                             *
                             * BUT in this case (repeats, ul> li.... complicated) 
                             *  => works better (if shaking a lot of line in a row it won't mess up)
                             *
                             *-> in html :                     dd-remove-line="removeThisLine($index)
                             *-> in controller :               $scope.removeThisLine = function(lineIndex){
                             *-> so in directive call it  :    $scope.removeLine();
                             */                            
                            //$scope.removeLine({indexToDelete: currentIndex});
                            $scope.removeLine();
                            //console.warn('force timer destruction after delete!');
                            $timeout.cancel(timer);
                        }

                        //1st dbl click : make it shake so ready to delete
                        if ($scope.deleteLine.dblClickCount === 0) {
                            $scope.deleteLine.dblClickCount = $scope.deleteLine.dblClickCount + 1;
                            $scope.deleteLine.readyToDelete = true;
                        }
                        
                    }
                };


                /**
                 * signle event will ever occur
                 *
                 * to prevent it to interfere with double click sequence 
                 * -> set a time out (shaking line to delete will automaticallly end shaking after timeout : 2 seconds)
                 */
                
                var timer;

                $scope.cancelDelete = function(event){
                    //event.preventDefault();
                    //event.stopPropagation();
                    
                        timer = $timeout(function(){
                    
                        $scope.deleteLine.dblClickCount = 0;
                        $scope.deleteLine.readyToDelete = false;  
                          
                    }, 500);


                    /**
                     * debug
                     */
                    // timer.then(
                    //     function() {
                    //         console.log( 'Timer resolved!', Date.now() );
                    //     },
                    //     function() {
                    //         console.log( 'Timer rejected!', Date.now() );
                    //     }
                    // );

                };


                /**
                 * timer destruction to prevent from bad UI experience
                 */
                $scope.$on('$destroy', function(){
                        //console.warn('timer destruction!');
                        $timeout.cancel(timer);
                    }
                );                


                /**
                 * prevent transclusion creating child scope  
                 *
                 *
                 * NOTE :if you want to know more about what I'm saying : check this nice tip on the subject : 
                 * http://angular-tips.com/blog/2014/03/transclusion-and-scopes/        
                 */
                transclude($scope.$parent, function(contentClone){
                    //transclusion will append content to '<div id="lineDirectiveTranscludeHere"></div>'
                    var childDiv = angular.element(element.children()[0]); 
                    childDiv.append(contentClone);
                });   
            }
        };


    }]);


/**
 *  ------------------------------------------------------
 *  directive : ddNoEditableControl
 *  ------------------------------------------------------
 *
 * prevent a control like an input to be editable 
 *  
 *  (otherwise should lead to bas use experience with drag and drop) 
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.directives.ngwfDdNoEditableControlDirective', [])
	.directive('ddNoEditableControl', [

	function(){


		return {
		    
		    restrict: 'A',

		    link: function($scope, element) {    
		        
					element.bind('click', function(event){
						event.preventDefault();
						//console.dir('click on control not available.');
					});

		    }
			};

}]);


/**
 *  ------------------------------------------------------
 *  directives container
 *  ------------------------------------------------------
 *
 *      Syntax (convention) :
 *          "ngwfApp" = application
 *          "ngwfApp.directives" = container directives module
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.directives', [	'ngwfApp.directives.ngwfStRationDirective',
																	'ngwfApp.directives.ngwfDdDecorDropZoneDirective',
																	'ngwfApp.directives.ngwfDdDecorContainerDirective',
																	'ngwfApp.directives.ngwfDdDecorLineDirective',
																	'ngwfApp.directives.ngwfDdDecorItemDirective',
																	'ngwfApp.directives.ngwfDdNoEditableControlDirective',
																	'ngwfApp.directives.ngwfDdContentCounterDirective',
	function () {

}]);


/**
 *  ------------------------------------------------------
 *  directive : stRatio
 *  ------------------------------------------------------
 *
 * adapt element's width % 
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.directives.ngwfStRationDirective', [])
	.directive('stRatio',[

  function(){

        return {
        	restrict: 'A',

          link:function(scope, element, attr){
            var ratio=+(attr.stRatio);
            
            element.css('width',ratio+'%');
            
          }
        };
}]);
/**
 *  ------------------------------------------------------
 *  filters container
 *  ------------------------------------------------------
 *
 *      Syntax (convention) :
 *          "ngwfApp" = application
 *          "ngwfApp.filters" = container filters module
 *           
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.filters', ['ngwfApp.filters.trustThis', 
	
	function () {

	}]);

/**
 *  ------------------------------------------------------
 *  filter : trustThis
 *  ------------------------------------------------------
 *
 *  filter to force trust content when ng-bind html form model :
 *  
 *  "<span ng-bind-html="item.label | trustThis"></span>	"
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.filters.trustThis', [])
	.filter('trustThis', ['$sce',

	function($sce) {

  return function(value, type) {
    					return $sce.trustAs(type || 'html', value);
  				};
}]);

/**
 *  ------------------------------------------------------
 *  service : dragDropItemDecorationService
 *  ------------------------------------------------------
 *
 *  service that helps manipulating drag drop item class
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.services.dragDropItemCountersService', [])
	.factory('dragDropItemCounterService', ['dragDropConfig', 
	
	function(dragDropConfig){

		var _modelItemRealCounter = [];
		var _itemsNotToCount = angular.copy(dragDropConfig.getItemsNotToCount());

		var Service = {};
		
		Service.getItemsNotToCount = function(){
																	return _itemsNotToCount;
																	}; 

		Service.getModelItemsRealCounter = function(){
																		  	return _modelItemRealCounter;
																				};

		Service.isHtmlElementToCount = function(htmlvalue){
																			var isToCount = true;
																			if (htmlvalue.length > 0) {

																				angular.forEach(_itemsNotToCount, function(value){

																					for (var classes = htmlvalue.length - 1; classes >= 0; classes--) {
																						if (htmlvalue[classes] === value){
																							isToCount = isToCount & false;
																						}
																					}

																				});
																				/**
																				 * just for debug
																				 */
																				// console.info(
																				// 							[
																												
																				// 								'isHtmlElementToCount',
																				// 								'-htmlvalue-',
																				// 								htmlvalue,
																				// 								'isToCount',
																				// 								isToCount,
																				// 							].join(' ')
																				// 						);
																			}
																			
																			return isToCount;	
																		};																	
		Service.updateLineItemCss = function(fullModel, listCssToApply, columIndex, lineIndex, realCount){
																	  if (typeof fullModel 			!== 		'undefined' &&
																	  	  typeof listCssToApply !== 		'undefined' &&
																	  	  typeof columIndex 		!== 		'undefined' &&
																	  	  typeof lineIndex 			!== 		'undefined' &&
																	  	  typeof realCount 			!== 		'undefined') {

																					for (var i = fullModel[columIndex][lineIndex].length - 1; i >= 0; i--) {
																						
																						for (var j = 0; j < listCssToApply.length; j++) {
																							if(listCssToApply[j].item === i &&
																								 listCssToApply[j].isReal === true){

																								fullModel[columIndex][lineIndex][i].cssClass = dragDropConfig.getItemCssDependingNumberItemsInRow(realCount);
																								/**
																								 * juste for debug
																								 */
																								// console.warn([
																								// 								'-from updateLineItemCss-',
																								// 								'css apply :',
																								// 								fullModel[columIndex][lineIndex][i].cssClass,
																								// 								'to columIndex: ',
																								// 								columIndex,
																								// 								'and lineIndex',
																								// 								lineIndex,
																								// 								'itemIndex',
																								// 								i
																								// 							].join(' ')
																								// 							);
																							} 	
																						}

																					}																					
																					return true;
																				}
																			};
		
		return Service;

}]);
/**
 *  ------------------------------------------------------
 *  service : dragDropItemDecorationService
 *  ------------------------------------------------------
 *
 *  service that helps manipulating drag drop item class
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.services.dragDropItemDecorationService', [])
	.factory('dragDropItemDecorationService', 
																			['dragDropConfig',  
	
	function(dragDropConfig){

		var _listItemClass = [].concat(dragDropConfig.getListItemCssClass());

		var Service = {};

		Service.getListClass = function(){
														return _listItemClass;
														};

	  Service.getCssClassWhenNumberItemsInRowIs = function(thisNumber){
	  																						return dragDropConfig.getItemCssDependingNumberItemsInRow(thisNumber);
																								}; 

		Service.applyCssClassWholeLine = function(model, indexColumn, indexLine, numberItems, restrictToThisIndexColumn){
		  if (typeof numberItems !== 'undefined' &&
		  	  typeof indexLine !== 'undefined' &&
		  	  typeof indexColumn !== 'undefined' &&
		  	  typeof model !== 'undefined' &&
		  	  typeof restrictToThisIndexColumn !== 'undefined') {

		    if (indexColumn === restrictToThisIndexColumn) {

	        for (var i = model[indexColumn][indexLine].length - 1; i >= 0; i--) {
		          model[indexColumn][indexLine][i].cssClass = dragDropConfig.getItemCssDependingNumberItemsInRow(numberItems);
		      }

		    } 
		    return true;
		  }else{
		    return false;
		  }
		};

		Service.updateCssClassWholeColumn = function(model, indexColumn){

		  if (typeof indexColumn !== 'undefined' &&
		  	  typeof model !== 'undefined') {

		   	/**
		   	 * iterates through rows
		   	 */
		   	for (var cpt = model[indexColumn].length - 1; cpt >= 0; cpt--) {
			   	/**
			   	 * iterates through items
			   	 */
		      for (var i = model[indexColumn][cpt].length - 1; i >= 0; i--) {
		          model[indexColumn][cpt][i].cssClass = dragDropConfig.getItemCssDependingNumberItemsInRow(model[indexColumn][cpt].length);
		      }
		   	}	

		    return true;
			}else{
				return false;
			}
		};

		return Service;

}]);
/**
 *  ------------------------------------------------------
 *  service : controllerModalProxy
 *  ------------------------------------------------------
 *
 *  service dedicated to - edit control - (controller modal proxy)
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.services.ngwfEditCtrlControllerModalProxy', [])
	.factory('controllerModalProxy', [	'EasyFormGenFormlyBindingModels',

	function( EasyFormGenFormlyBindingModels ){
		
		var Service = {};


	  function resetNyaSelect(nyaSelectObj){

	    var newNyaSelectObj = EasyFormGenFormlyBindingModels.getEasyFormListControls();

	  	angular.copy(newNyaSelectObj, nyaSelectObj);
	    return true;
	  }
	  
	  function returnControlFromAddCtrlModalModel(CtrlModalModel){

	    var modelToReturn = {
	          selectedControl		: 'none',
	          formlyType 				: 'none',
	          formlySubtype			: 'none',
	          formlyLabel				: '',
	          formlyRequired 		: false,
	          formlyDesciption	: '',
	          formlyPlaceholder	: '',
	          formlyOptions			: []
	    };

	    for (var i = CtrlModalModel.controls.length - 1; i >= 0; i--) {
	      if (CtrlModalModel.selectedControl === CtrlModalModel.controls[i].id) {

	        modelToReturn.selectedControl 	= CtrlModalModel.selectedControl;
	        modelToReturn.formlyType 				= CtrlModalModel.controls[i].formlyType;
	        modelToReturn.formlySubtype 		= CtrlModalModel.controls[i].formlySubtype;
	        modelToReturn.formlyLabel 			= CtrlModalModel.controls[i].formlyLabel;
	        modelToReturn.formlyRequired 		= CtrlModalModel.controls[i].formlyRequired;
	        modelToReturn.formlyDesciption 	= CtrlModalModel.controls[i].formlyDesciption;
	        modelToReturn.formlyPlaceholder = CtrlModalModel.controls[i].formlyPlaceholder;
	        modelToReturn.formlyOptions 		= CtrlModalModel.controls[i].formlyOptions;
	        /**
	         * particular properties 
	         * 
	         * here ; datetpicker format
	         */
	        if (CtrlModalModel.controls[i].formlyType === 'datepicker') {
						modelToReturn.datepickerPopup = CtrlModalModel.controls[i].datepickerPopup;   
	        }
	      }
	    }
	    return modelToReturn;
	  }
	  
	  function validKeyUniqueness(thisKey, configurationObj){
	    var isUnique = true;
	    for (var i = configurationObj.lines.length - 1; i >= 0; i--) {
	      for (var j = configurationObj.lines[i].columns.length - 1; j >= 0; j--) {
	        if (configurationObj.lines[i].columns[j].control.key === thisKey) {
	          isUnique = false;
	        }
	      } 
	    }
	    return isUnique;  
	  }  

		Service.initNyaSelect = function(nyaSelectObj){
    	return resetNyaSelect(nyaSelectObj);
    };

    Service.getNyASelectFromSelectedLineColumn = function(nyaSelectObj, configurationObj, indexLine, numcolumn){
	    resetNyaSelect(nyaSelectObj);  
	    /**
	     * data send to modal controller
	     */
	    if (typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions != 'undefined') {

	      nyaSelectObj.temporyConfig.selectedControl 		= typeof configurationObj.lines[indexLine].columns[numcolumn].control.selectedControl != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.selectedControl : 'none';
	      nyaSelectObj.temporyConfig.formlyLabel 				= typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.label != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.label : '';
	      nyaSelectObj.temporyConfig.formlyRequired	 		= typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.required != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.required : '';
	      nyaSelectObj.temporyConfig.formlyDesciption 	= typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.description != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.description : '';
	      nyaSelectObj.temporyConfig.formlyPlaceholder 	= typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.placeholder != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.placeholder : '';
	      nyaSelectObj.temporyConfig.formlyOptions 			= typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.options != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.options : '';
	      /**
	       * particular case : datepicker
	       */
	      if (nyaSelectObj.temporyConfig.selectedControl === 'Date') {
	      	nyaSelectObj.temporyConfig.datepickerPopup = typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.datepickerPopup != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.datepickerPopup : '';
	      }
	    }
	    return nyaSelectObj;
		};


		Service.bindConfigurationModelFromModalReturn =  function(indexLine, numcolumn, modalAddCtrlModel, configurationObj){
				      
				      var extractedProps = returnControlFromAddCtrlModalModel(modalAddCtrlModel);

				      configurationObj.lines[indexLine].columns[numcolumn].control.selectedControl 	= extractedProps.selectedControl;
				      configurationObj.lines[indexLine].columns[numcolumn].control.type 						= extractedProps.formlyType;
				      configurationObj.lines[indexLine].columns[numcolumn].control.subtype 					= extractedProps.formlySubtype;
				      /**
				       * templateOptions
				       */
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions = {
		                                                                                            label				: '',
		                                                                                            required		: false,
		                                                                                            description	: '',
		                                                                                            placeholder	: '',
		                                                                                            options			: []
				                                                                                      };
				       /**
				        * then bind template option
				        */
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.label 				= extractedProps.formlyLabel;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.required 		= extractedProps.formlyRequired;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.description 	= extractedProps.formlyDesciption;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.placeholder 	= extractedProps.formlyPlaceholder;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.options 			= extractedProps.formlyOptions;

				      /**
				       * add additionnal — particular — properties :
				       * 
				       * -> datepicker : datepickerPopup
				       */
				      if (configurationObj.lines[indexLine].columns[numcolumn].control.type === 'datepicker') {
				       	configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.datepickerPopup = extractedProps.datepickerPopup;
				      }	

				      /**
				       * unique key (set only first time) in this model is formly control type + Date.now(); 
				       */
				      var newKey = configurationObj.lines[indexLine].columns[numcolumn].control.type + '-' + Date.now();

			        if (validKeyUniqueness(newKey, configurationObj) === true){
			          configurationObj.lines[indexLine].columns[numcolumn].control.key = newKey;
			        }else{
			          newKey = configurationObj.lines[indexLine].columns[numcolumn].control.type + '-' + Date.now();
			          if (validKeyUniqueness(newKey, configurationObj) === true){
			            configurationObj.lines[indexLine].columns[numcolumn].control.key = newKey;
			          }else{
			            newKey = configurationObj.lines[indexLine].columns[numcolumn].control.type + '-' + Date.now();
			          }
			        }                                                                     

				      configurationObj.lines[indexLine].columns[numcolumn].control.edited = true;

		};

		Service.applyConfigToSelectedControl = function(nyaSelectObj){
				  	
				    for (var i = nyaSelectObj.controls.length - 1; i >= 0; i--) {
				      if (nyaSelectObj.controls[i].id === nyaSelectObj.selectedControl) {

				          nyaSelectObj.controls[i].formlyLabel 				= nyaSelectObj.temporyConfig.formlyLabel;
				          nyaSelectObj.controls[i].formlyRequired 		= nyaSelectObj.temporyConfig.formlyRequired;
				          nyaSelectObj.controls[i].formlyDesciption 	= nyaSelectObj.temporyConfig.formlyDesciption;
				          nyaSelectObj.controls[i].formlyPlaceholder 	= nyaSelectObj.temporyConfig.formlyPlaceholder;
				          nyaSelectObj.controls[i].formlyOptions 			= nyaSelectObj.temporyConfig.formlyOptions;

				          if (nyaSelectObj.controls[i].id ==='Date' ) {
				          	nyaSelectObj.controls[i].datepickerPopup 	= nyaSelectObj.temporyConfig.datepickerPopup;  	
				          }
				        
				       }
				    }
		};



    return Service;

  }]);


/**
 *  ------------------------------------------------------
 *  service : formFieldManage
 *  ------------------------------------------------------
 *
 *         MOST IMPORTANT service to manage formly field model 
 *  (the presentation model and the back model or configuration model)
 * 
 *
 *  - "formlyModel" is the model exposed to view or html "fields model" (= an array of objects)
 *    This model is the one you can see in all well documented examples here : http://angular-formly.com
 *    -> in your view or html : <formly-form model="dataModel" fields="formlyModel">
 *
 *  - "configurationModel" is the model on which editing a form will work
 *    before applying results to "formlyModel"
 *
 *
 * NOTE : if you save a form to database, you will save "configurationModel" rather than "formlyModel".
 *        Why? : 
 *          since as you plan to create a form generator you can't create a finite model
 *          since you may want to be able to save the generated form even if it is not a finite model
 *          since "formlyModel" objects will be populated with a lot of properties you don't need to store contrary to "configurationModel" which contains only what you need
 *          since "formlyModel" can't be JSON.stringify when you want to use advanced layout (1 column/2/3 columns template?)
 *          since it is better approach to use a backgroundModel (async operation ...) that is bind to presentation model only when it is fully ready or filled.
 *
 *
 * NOTE : 
 * - if you want to manage more columns templates (right now only manage up to 3 columns), just inspire from existing code
 * - if you want to extend easy form generator, be sure to be a minimum comfortable with "angular formly": http://angular-formly.com
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
  .module('ngwfApp.services.formFieldManage', [])
  .factory('formFieldManage', [ 'EasyFormGenFormlyBindingModels', 

  function( EasyFormGenFormlyBindingModels ){

    var Service = {};

    /**
     * At initial state : configuration model will contain 1 line, since :
     *    -> it is non sense to create a form without a single line (no line = no form at all)
     *    -> so it is non sense to force user to add a first line
     * 
     *  PLEASE NOTE columns array contains objects that look like formly fields one
     */
    Service.initConfigurationEditFromScratch =  function(configurationModel, addStepWayProperties){
      var configurationModelInit = EasyFormGenFormlyBindingModels.getEasyFormInitialStateConfigurationModel(addStepWayProperties); 
      angular.copy(configurationModelInit, configurationModel);
    };

    /**
     * Get an configuration empty (no init line) then empty it with lines array provided in param
     * @param   object - configurationModel   [configuration model]
     * @param   array -  lines                [an array : lines to apply to an empty configuration model]
     * @param   bool -   addStepWayProperties [description]
     * @return {object message}               [give details on how it happened to caller]
     */
    Service.bindConfigurationLines = function(configurationModel, lines, addStepWayProperties){
              
      if( Object.prototype.toString.call(lines) === '[object Array]' ) {
        var configurationModelResult = EasyFormGenFormlyBindingModels.getEasyFormReloadConfigurationModel(addStepWayProperties);

        configurationModelResult.lines = [].concat(lines);  
        angular.copy(configurationModelResult, configurationModel);                                         

        return getMessageObject('configuration model is bound','lines are bound to configuration model.');
      }else{
        return getErrorObject('lines is not an array', 'Checks lines type, it is not an array.');
      }
    };
    /**
     * applyConfigurationToformlyModel : 
     *  - bind configuration model into formly field model
     *  - reset dataModel (formlyfield may have changed so previous dataModel would be false)
     * @param  configurationModel 
     * @param  formlyModel        
     * @param  formlyDataModel    
     */
    Service.applyConfigurationToformlyModel = function(configurationModel, formlyModel, formlyDataModel){
      resetFormlyModel(formlyModel);
      resetDataModel(formlyDataModel);

      //manage header here line0
      var lineNumber = configurationModel.lines.length;
      for (var i = 0; i < lineNumber; i++) {

          /**
           * 1 column line control
           */
          if (configurationModel.lines[i].columns.length === 1) {
            /**
             * test if template control = header
             * header is not a control in formly but a simple template
             */
            if (configurationModel.lines[i].columns[0].control.type === 'header') {
              AddOneColumnHeader(formlyModel, configurationModel, i);
            }else{
              AddOneColumnControl(formlyModel, configurationModel, i);  
            }
          }
          /**
           * 2 columns line control
           * header, datepicker are particular cases, manganed inside AddTwoColumnControl()
           */
          if (configurationModel.lines[i].columns.length === 2) {
            AddTwoColumnControl(formlyModel, configurationModel,i);
          }
          /**
           * 3 columns line control
           * header, datepicker are particular cases, manganed inside AddThreeColumnControl()
           */
          if (configurationModel.lines[i].columns.length === 3) {
            AddThreeColumnControl(formlyModel, configurationModel,i);
          }
      }
    };
        
    return Service;



    function resetFormlyModel(formlyModel){
      var resetformly = [];
      angular.copy(resetformly, formlyModel);
    }

    function AddOneColumnHeader(formlyModel, configurationModel,lineIndex){
      /**
       * NOTE : text header is stored in "description" in templateOtion model
       */
      var headerTemplateCol0 =  [
                                  '<div class="row">',
                                  '  <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">',
                                  '    <h2 class="text-center">', 
                                       extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control), 
                                  '    <h2>',
                                  '  </div>',
                                  '</div>',
                                  '<hr/>'
                                ].join('');
      formlyModel.push(
                        {
                          template: typeof configurationModel.lines[lineIndex].columns[0].control.type !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'header' ? headerTemplateCol0 : '<div></div>') : '<div></div>'
                        }
                      );
    }


    function AddDatepickerPopupProperty(fieldToPush, configurationModel,lineIndex){
      fieldToPush.templateOptions.datepickerPopup = extractTemplateOptionDatepickerPopup(configurationModel.lines[lineIndex].columns[0].control);
    }

    function AddOneColumnControl(formlyModel, configurationModel,lineIndex){

      var fieldToPush = {
                          className : 'col-xs-12',
                          type      : typeof configurationModel.lines[lineIndex].columns[0].control.type  !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[0].control.type): 'blank',
                          key       : typeof configurationModel.lines[lineIndex].columns[0].control.key   !== 'undefined' ?  configurationModel.lines[lineIndex].columns[0].control.key : 'blank' + Date.now(),
                          
                          templateOptions: {
                                type        : extractTemplateOptionType(configurationModel.lines[lineIndex].columns[0].control),
                                label       : extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[0].control),
                                required    : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[0].control),
                                placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[0].control),
                                description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control),
                                options     : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[0].control)
                          } 
                        };
      /**
       * datepicker additionnal particular property   
       */
      if (configurationModel.lines[lineIndex].columns[0].control.type === 'datepicker') {
        AddDatepickerPopupProperty(fieldToPush, configurationModel,lineIndex);
      }     

      formlyModel.push( 
                        fieldToPush
                      );
    }

    function AddTwoColumnControl(formlyModel, configurationModel,lineIndex){
      /**
       * NOTE : text header is stored in "description" in templateOtion model
       */
      var headerTemplateCol0 =  {
                                  className   : 'col-xs-6',
                                  template    :   [
                                                    '<div class="row">',
                                                    '  <div class="">',
                                                    '    <h2 class="text-center">', 
                                                         extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control), 
                                                    '    <h2>',
                                                    '    <hr/>',
                                                    '  </div>',
                                                    '</div>'
                                                  ].join('')
                                };

      var headerTemplateCol1 =  {
                                  className   : 'col-xs-6',
                                  template    :   [
                                                    '<div class="row">',
                                                    '  <div class="">',
                                                    '    <h2 class="text-center">', 
                                                         extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control), 
                                                    '    <h2>',
                                                    '    <hr/>',
                                                    '  </div>',
                                                    '</div>'
                                                  ].join('')
                                };

      var controlCol0 =     {
                                className : 'col-xs-6',
                                type      : typeof configurationModel.lines[lineIndex].columns[0].control.type  !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[0].control.type): 'blank',
                                key       : typeof configurationModel.lines[lineIndex].columns[0].control.key   !== 'undefined' ?  configurationModel.lines[lineIndex].columns[0].control.key : 'blank' + Date.now(),
                                templateOptions: {
                                    type        : extractTemplateOptionType(configurationModel.lines[lineIndex].columns[0].control),
                                    label       : extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[0].control),
                                    required    : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[0].control),
                                    placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[0].control),
                                    description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control),
                                    options     : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[0].control)             
                                }
                              };
      /**
       * datepicker additionnal particular property   
       */                
      if (configurationModel.lines[lineIndex].columns[0].control.type === 'datepicker') {
        AddDatepickerPopupProperty(controlCol0, configurationModel,lineIndex);
      }                            

      var controlCol1 =  {
                                className : 'col-xs-6',
                                type      : typeof configurationModel.lines[lineIndex].columns[1].control.type  !== 'undefined' ?  (configurationModel.lines[lineIndex].columns[1].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[1].control.type) : 'blank',
                                key       : typeof configurationModel.lines[lineIndex].columns[1].control.key   !== 'undefined' ?  configurationModel.lines[lineIndex].columns[1].control.key : 'blank' + Date.now(),
                                templateOptions: {
                                    type        : extractTemplateOptionType(configurationModel.lines[lineIndex].columns[1].control),
                                    label       : extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[1].control),
                                    required    : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[1].control),
                                    placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[1].control),
                                    description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control),
                                    options     : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[1].control)             
                                }
                        };

      //////////////////////////////////////////////                  
      //datepicker additionnal particular property  
      //////////////////////////////////////////////                  
      if (configurationModel.lines[lineIndex].columns[1].control.type === 'datepicker') {
        AddDatepickerPopupProperty(controlCol1, configurationModel,lineIndex);
      }                                

      var FieldGroup = [];

      if (configurationModel.lines[lineIndex].columns[0].control.type === 'header') {
        FieldGroup.push(headerTemplateCol0);
      }else{
        FieldGroup.push(controlCol0);
      }
       
      if (configurationModel.lines[lineIndex].columns[1].control.type === 'header') {
        FieldGroup.push(headerTemplateCol1);
      }else{
        FieldGroup.push(controlCol1);
      }    

      formlyModel.push(
                         {
                            className: 'row', 
                            fieldGroup: FieldGroup
                          }
                      );
    }

    /**
     * New auuto adpat  add N column controls
     */
    function AddNColumnControl(formlyModel, configurationModel,lineIndex){
      /**
       * iterates through controls
       */
      var numberOfColumns = configurationModel.lines[lineIndex].columns.length;

      configurationModel.lines[lineIndex].columns.forEach(function(column){
        var controlTemplate = {};

        if (column.control.type === 'header') {
          /**
           * header is not a control just a template
           *
           * getHeaderTemplateForNcolumnLine()
           */
          var headerTextContent = column.control;
          controlTemplate = EasyFormGenFormlyBindingModels.getHeaderTemplateForNcolumnLine(numberOfColumns, headerTextContent);

        }else{
          /**
           * controls : getFormlyControlTemplateForNcolumnLine()
           *
           * @PARAM numberOfColumns       : integer to deduce cssClss to apply
           * @PARAM column.control.type   : to add if needed specific properties (example : datepicker)
           */
          controlTemplate = EasyFormGenFormlyBindingModels.getFormlyControlTemplateForNcolumnLine(numberOfColumns, column.control.type);

        }

        FieldGroup.push(controlTemplate);

        var FieldGroup = [];
        formlyModel.push(
                           {
                              className: 'row', 
                              fieldGroup: FieldGroup
                            }
                        );        

      });

    }

    function AddThreeColumnControl(formlyModel, configurationModel,lineIndex){

        //text header is stored in "description" in templateOtion model
        var headerTemplateCol0 =  {
                                    className : 'col-xs-4',
                                    template  :   [
                                                    '<div class="row">',
                                                    '  <div class="">',
                                                    '    <h2 class="text-center">', 
                                                         extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control), 
                                                    '    <h2>',
                                                    '    <hr/>',
                                                    '  </div>',
                                                    '</div>'
                                                  ].join()
                                  };

        var headerTemplateCol1 =  {
                                    className : 'col-xs-4',
                                    template  : '<div class="row"><div class=""><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control) + '<h2><hr/></div></div>'
                                  };

        var headerTemplateCol2 =  {
                                    className : 'col-xs-4',
                                    template  : '<div class="row"><div class=""><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[2].control) + '<h2><hr/></div></div>'
                                  };
      

        var controlCol0 =     {
                                  className : 'col-xs-4',
                                  type      : typeof configurationModel.lines[lineIndex].columns[0].control.type  !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[0].control.type): 'blank',
                                  key       : typeof configurationModel.lines[lineIndex].columns[0].control.key   !== 'undefined' ?  configurationModel.lines[lineIndex].columns[0].control.key : 'blank' + Date.now(),
                                  templateOptions: {
                                      type        : extractTemplateOptionType(configurationModel.lines[lineIndex].columns[0].control),
                                      label       : extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[0].control),
                                      required    : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[0].control),
                                      placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[0].control),
                                      description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control),
                                      options     : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[0].control)             
                                  }
                                };
        //////////////////////////////////////////////                  
        //datepicker additionnal particular property  
        //////////////////////////////////////////////                  
        if (configurationModel.lines[lineIndex].columns[0].control.type === 'datepicker') {
          AddDatepickerPopupProperty(controlCol0, configurationModel,lineIndex);
        }                             

        var controlCol1 =  {
                                  className: 'col-xs-4',
                                  type: typeof configurationModel.lines[lineIndex].columns[1].control.type !== 'undefined' ?  (configurationModel.lines[lineIndex].columns[1].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[1].control.type) : 'blank',
                                  key: typeof configurationModel.lines[lineIndex].columns[1].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[1].control.key : 'blank' + Date.now(),
                                  templateOptions: {
                                      type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[1].control),
                                      label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[1].control),
                                      required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[1].control),
                                      placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[1].control),
                                      description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control),
                                      options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[1].control)             
                                  }
                          };
        //////////////////////////////////////////////                  
        //datepicker additionnal particular property  
        //////////////////////////////////////////////                  
        if (configurationModel.lines[lineIndex].columns[1].control.type === 'datepicker') {
          AddDatepickerPopupProperty(controlCol1, configurationModel,lineIndex);
        }                       
        var controlCol2 =  {
                                  className: 'col-xs-4',
                                  type: typeof configurationModel.lines[lineIndex].columns[2].control.type !== 'undefined' ?  (configurationModel.lines[lineIndex].columns[2].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[2].control.type) : 'blank',
                                  key: typeof configurationModel.lines[lineIndex].columns[2].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[2].control.key : 'blank' + Date.now(),
                                  templateOptions: {
                                      type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[2].control),
                                      label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[2].control),
                                      required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[2].control),
                                      placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[2].control),
                                      description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[2].control),
                                      options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[2].control)             
                                  }
                          };
        //////////////////////////////////////////////                  
        //datepicker additionnal particular property  
        //////////////////////////////////////////////                  
        if (configurationModel.lines[lineIndex].columns[2].control.type === 'datepicker') {
          AddDatepickerPopupProperty(controlCol2, configurationModel,lineIndex);
        }     

        var FieldGroup = [];

        if (configurationModel.lines[lineIndex].columns[0].control.type === 'header') {
          FieldGroup.push(headerTemplateCol0);
        }else{
          FieldGroup.push(controlCol0);
        }
         
        if (configurationModel.lines[lineIndex].columns[1].control.type === 'header') {
          FieldGroup.push(headerTemplateCol1);
        }else{
          FieldGroup.push(controlCol1);
        }    

        if (configurationModel.lines[lineIndex].columns[2].control.type === 'header') {
          FieldGroup.push(headerTemplateCol2);
        }else{
          FieldGroup.push(controlCol2);
        }    


        formlyModel.push(
                           {
                              className: 'row', 
                              fieldGroup: FieldGroup
                            }
                        );
    }



    function isTemplateOptionDefined(obj){
      return typeof obj.templateOptions !== 'undefined' ? true : false;
    }

    function extractTemplateOptionLabel(obj){

     //console.info('extractTemplateOptionLabel');
     //console.dir(obj);
     return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.label !== 'undefined'? obj.templateOptions.label: '') : '';
    }


    function extractTemplateOptionDatepickerPopup(obj){
      return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.datepickerPopup !== 'undefined'? obj.templateOptions.datepickerPopup: '') : '';
    }

    function extractTemplateOptionRequired(obj){
      return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.required !== 'undefined'? obj.templateOptions.required: '') : '';
    }
    //radio and select
    function extractTemplateOptionOptions(obj){
      return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.options !== 'undefined'? obj.templateOptions.options: '') : '';
    }



    function extractTemplateOptionType(obj){
      return  typeof obj.subtype !== 'undefined'? obj.subtype: '';
    }

    function extractTemplateOptionPlaceholder(obj){
      return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.placeholder !== 'undefined'? obj.templateOptions.placeholder: '') : '';
    }

    function extractTemplateOptionDescription(obj){
      return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.description !== 'undefined'? obj.templateOptions.description: '') : '';
    }


    /////////////////////////////////////////
    // formly model functions
    /////////////////////////////////////////

    function resetDataModel(obj){
      var emptyDataModel = {};
      angular.copy(emptyDataModel, obj);
      return true;
    }

    /////////////////////////////////////////
    // custom errors
    /////////////////////////////////////////

    var messageObj =  {
                          noError   : false,
                          title     : '',
                          Message   : ''  
                      };

    function getErrorObject(errorTitle, errorMessage){

      var messageObj =  {
                          noError   : false,
                          title     : '',
                          Message   : ''  
                        };

      messageObj.noError  = false;
      messageObj.title    = errorTitle;
      messageObj.Message  = errorMessage;
      return messageObj;
    }

    function getMessageObject(messageTitle, messageBody){
      var messageObj =  {
                          noError   : false,
                          title     : '',
                          Message   : ''  
                        };

      messageObj.noError    = true;
      messageObj.title      = messageTitle;
      messageObj.Message    = messageBody;
      return messageObj;
    }
  
}]);






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// service to manage select options (used in modal to edit control)
//
//  module = "service"  selectOptionManage (manage : selects, radio...)
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.services.serviceNAME" = container services module
//
//  This module is a service -> it must be injected in services container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular
  .module('ngwfApp.services.selectOptionManage', [])
  .factory('selectOptionManage', [ function(){
	//console.log('--> INIT : Hello service  \'\'selectOptionManage\'\' ');

    return {
            testMe: function() {
                return 'selectOptionManage is here.';
            },

            initModel: function(selectObj){
              resetModel(selectObj);
            },
        
            isOptionUnique: function(selectObj, textValue){
              for (var i = selectObj.rows.length - 1; i >= 0; i--) {

                if (selectObj.rows[i].option === textValue) {
                  return false;
                }
                
              }
              return true;
            },

            //test if not empty string (= full space string is not conidered as valid)
            isOptionValidFormat: function(textValue){
              if (textValue !== '') {
                return true;
              }
              return false;                    
            },

            addNewOptionRadio: function(selectObj, newOptionText){
              var fullResponse = {
                                    resultFlag : false,
                                    details : ''
                                  };

              var checkResult = validOption(selectObj, newOptionText);  

              //console.info(checkResult);

              if (checkResult.resultFlag === true){

                  var newOption = {
                                      option: newOptionText,
                                      order: selectObj.rows.length
                                  };

                  selectObj.rows.push(newOption);
                  fullResponse.resultFlag = true;
                  fullResponse.details = '';
                  return fullResponse;
              }else{

                    angular.copy(checkResult, fullResponse);                    
                    return fullResponse;                        
              }


            },


            addNewOptionBasicSelect: function(selectObj, newOptionText){
              var fullResponse = {
                                    resultFlag : false,
                                    details : ''
                                  };

              var checkResult = validOption(selectObj, newOptionText);  

              //console.info(checkResult);

              if (checkResult.resultFlag === true){

                  var newOption = {
                                      option: newOptionText,
                                      order: selectObj.rows.length
                                  };

                  selectObj.rows.push(newOption);
                  fullResponse.resultFlag = true;
                  fullResponse.details = '';
                  return fullResponse;
              }else{

                    angular.copy(checkResult, fullResponse);                    
                    return fullResponse;                        
              }


            },

            addNewOptionGroupedSelect: function(selectObj, newOptionText, newOptionGroup){
              var fullResponse = {
                                    resultFlag : false,
                                    details : ''
                                  };

              // if (typeof newOptionGroup === "undefined") {

              //     fullResponse.resultFlag = false;
              //     fullResponse.details = "Group option is undefined";
              //     return fullResponse;
              // }

              // if (newOptionGroup === "") {

              //     fullResponse.resultFlag = false;
              //     fullResponse.details = "Group option is undefined";
              //     return fullResponse;
              // }

              var checkResult = validOption(selectObj, newOptionText);  

          
              if (checkResult.resultFlag === true){

                  var newOption = {
                                      option: newOptionText,
                                      group: newOptionGroup,
                                      order: selectObj.rows.length
                                  };

                  selectObj.rows.push(newOption);
                  fullResponse.resultFlag = true;
                  fullResponse.details = '';
                  return fullResponse;
              }else{

                    angular.copy(checkResult, fullResponse);                    
                    return fullResponse;                        
              }

            },


            removeOption:  function(selectObj, AtIndex) {
              var fullResponse = {
                                  resultFlag : false,
                                  details : ''
                                };

              if (AtIndex !== -1) {
                  selectObj.rows.splice(AtIndex, 1);
                  fullResponse.resultFlag = true;
                  fullResponse.details= '';
                  return fullResponse;
              }else{
                  fullResponse.resultFlag = false;
                  fullResponse.details= 'Option index not valid';
                  return fullResponse;
              }
            },

            upthisOption : function(selectObj, indexOption){
              var fullResponse = {
                                  resultFlag : false,
                                  details : ''
                                };  

              if (indexOption > -1) {

                if (indexOption > 0) {

                  if (selectObj.rows[indexOption - 1]) {
                    var currentOption = selectObj.rows[indexOption];
                    selectObj.rows.splice(indexOption , 1);
                    selectObj.rows.splice((indexOption - 1), 0, currentOption); 

                    fullResponse.resultFlag = true;
                    fullResponse.details = '';
                    return fullResponse;
                  }else{
                    fullResponse.resultFlag = false;
                    fullResponse.details = 'Can\'t retreive option from option index';
                    return fullResponse;
                  }
                }else{
                    fullResponse.resultFlag = true;
                    fullResponse.details = '';
                    return fullResponse;
                }  

              }else{
                fullResponse.resultFlag = false;
                fullResponse.details = 'Option index not valid';
                return fullResponse;
              }
          },

          downthisOption : function(selectObj, indexOption){
              var fullResponse = {
                                  resultFlag : false,
                                  details : ''
                                };

              if (indexOption > -1) {
  

                if (indexOption < selectObj.rows.length - 1){
                  

                  if (selectObj.rows[indexOption + 1]) {
                    

                    var currentOption = selectObj.rows[indexOption];
                    
                    selectObj.rows.splice(indexOption , 1);
                    selectObj.rows.splice((indexOption + 1), 0, currentOption);  

                    fullResponse.resultFlag = true;
                    fullResponse.details = '';
                    return fullResponse;  

                  }else{
                    fullResponse.resultFlag = false;
                    fullResponse.details = 'Can\'t retreive option from option index';
                    return fullResponse;
                  }
                }else{

                  
                    fullResponse.resultFlag = true;
                    fullResponse.details = '';
                  return fullResponse;
                }


              }else{
                fullResponse.resultFlag = false;
                fullResponse.details = 'Option index not valid';
                return fullResponse;
              }

          }

      



        };




function validOption(selectObj, newOptionText){
    var fullResponse = {
                          resultFlag : false,
                          details : ''
                        };

    if (typeof newOptionText === 'undefined') {
        fullResponse.resultFlag = false;
        fullResponse.details = 'Entered option is empty';
        return fullResponse;
    }

    if (newOptionText !== '') {
          for (var i = selectObj.rows.length - 1; i >= 0; i--) {
            if (selectObj.rows[i].option === newOptionText) {
              fullResponse.resultFlag = false;
              fullResponse.details = 'Entered option is not unique';
              return fullResponse;
            }
          }
          fullResponse.resultFlag = true;
          fullResponse.details = '';
          return fullResponse;
    }
    fullResponse.resultFlag = false;     
    fullResponse.details = 'Entered option is empty';
    return fullResponse;
}

function resetModel(selectObj){
  var zeroModel = { 
                      rows:[]
                    };
  angular.copy(zeroModel, selectObj);
}


}]);






/**
 *  ------------------------------------------------------
 *  module = "services" container
 *  ------------------------------------------------------
 *      Syntax (convention) :
 *          "ngwfApp" = application
 *          "ngwfApp.services" = container services module
 *
 *  This module is a container -> it must be injected in the application -> so it will inject all services injected here
 *
 *
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/

angular.module('ngwfApp.services', 
							[	
								'ngwfApp.services.formFieldManage',
								'ngwfApp.services.selectOptionManage',
								'ngwfApp.services.ngwfWfFormsServices',
								'ngwfApp.services.ngwfEditCtrlControllerModalProxy',
								'ngwfApp.services.dragDropItemDecorationService',
								'ngwfApp.services.dragDropItemCountersService',
								function () {
}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  form API : suppose you have your RESTful backend 
//
//  module = "service"  for view "wfEdit"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.services.serviceNAME" = container services module
//
//  This module is a service -> it must be injected in services container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular
	.module('ngwfApp.services.ngwfWfFormsServices', ['ngResource'])
	.factory('wfFormsByIdServices', ['$resource', function($resource){
    return $resource('/api/wfedit/:id', {id: '@id'}, {

    });
  }]);


/**
 *  ------------------------------------------------------
 *   dragDropConfigProvider
 *  ------------------------------------------------------ 
 *
 * All customizations to "easy form generator - drag and drop version - " will be placed here
 *
 * customize it in your in module_app.config 
 * then use service in your application
 *
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
 */
angular
  .module('ngwfApp.providers.dragDropConfigProvider', [])
  .provider('dragDropConfig', [

    function(){

      /**
       * default drag drop item classes
       * 
       * -> by default : up to 3 items per rows
       */
      var _listDragDropItemCssClasses = [
                                            {
                                                cssClass : 'col-md-12', 
                                                numberItemPerRow: 0
                                            },
                                            {
                                                cssClass : 'col-md-12', 
                                                numberItemPerRow: 1
                                            },                                        
                                            {
                                                cssClass : 'col-md-6', 
                                                numberItemPerRow: 2
                                            },
                                            {
                                                cssClass : 'col-md-4', 
                                                numberItemPerRow: 3
                                            }
                                        ]; 
      /**
       * _initListControls  : default list of control to present as integratable to form.
       *
       * easyFormGenerator (no drag drop version) need this object in the modal when adding control to row. 
       *
       * works in, pair with formlyProvider in case of special control like 'RichTextEditor' 
       */
      var _initListControls = {

                        controls : [
                                    {
                                        id: 'empty',  
                                        name: 'no control', 
                                        subtitle: 'no control', 
                                        group: 'Blank', 
                                        formlyType: 'blank', 
                                        formlySubtype: '', 
                                        formlyLabel: '', 
                                        formlyRequired: false, 
                                        formlyDesciption: '', 
                                        formlyOptions: []
                                      },
                                    {
                                      id: 'Header',  
                                      name: 'Header', 
                                      subtitle: 'no control', 
                                      group: 'Decoration', 
                                      formlyType: 'header"', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'Subtitle',  
                                      name: 'Subtitle', 
                                      subtitle: 'no control', 
                                      group: 'Decoration', 
                                      formlyType: 'subTitle', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'TextInput',  
                                      name: 'Text input', 
                                      subtitle: 'Text input', 
                                      group: 'input', 
                                      formlyType: 'input', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'Password',  
                                      name: 'Password', 
                                      subtitle: 'Password', 
                                      group: 'input', 
                                      formlyType: 'input', 
                                      formlySubtype: 'password', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'Date',  
                                      name: 'Date', 
                                      subtitle: 'Date', 
                                      group: 'input', 
                                      formlyType: 'datepicker', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: [], 
                                      datepickerPopup: 'dd-MMMM-yyyy'
                                    },
                                    {
                                      id: 'Texarea', 
                                      name: 'Textarea', 
                                      subtitle: 'Textarea', 
                                      group: 'Textarea', 
                                      formlyType: 'textarea', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'RichTextEditor', 
                                      name: 'RichTextEditor', 
                                      subtitle: 'RichTextEditor', 
                                      group: 'Textarea', 
                                      formlyType: 'richEditor', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'Radio', 
                                      name: 'Radio', 
                                      subtitle: 'Radio', 
                                      options: [], 
                                      group: 'Radio', 
                                      formlyType: 'radio', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'Checkbox', 
                                      name: 'Checkbox', 
                                      subtitle: 'Checkbox', 
                                      group: 'Checkbox', 
                                      formlyType: 'checkbox', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'BasicSelect', 
                                      name: 'Basic select', 
                                      subtitle: 'Basic select',
                                      options: [], 
                                      group: 'Select', 
                                      formlyType: 'basicSelect', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '', 
                                      formlyOptions: []
                                    },
                                    {
                                      id: 'GroupedSelect', 
                                      name: 'Grouped Select', 
                                      subtitle: 'Grouped Select',
                                      options: [], 
                                      group: 'Select', 
                                      formlyType: 'groupedSelect', 
                                      formlySubtype: '', 
                                      formlyLabel: '', 
                                      formlyRequired: false, 
                                      formlyDesciption: '',
                                      formlyOptions: []
                                    }
                                  ],

                          selectedControl : 'none' ,
                          temporyConfig : {
                                            selectedControl: 'none',
                                            formlyLabel: 'label', 
                                            formlyRequired: false, 
                                            formlyDesciption: '',
                                            formlyPlaceholder: '',
                                            formlyOptions : []
                                          } 
        };                                               

      var _itemsNotToCountFoReal = {
                                      //placeholder :         '',
                                      itemBeingDragged :    ''
                                   };
      /**
       * setListItemCssClass : to use in app.config
       * -> if need to overrides/modify "_defaultDragDropItemCssClasses"
       */
      this.setListItemCssClass = function(fromConfig){
                                _listDragDropItemCssClasses = [].concat(fromConfig);
                                };            
      
      this.getItemsNotTocount = function(){
                                return _itemsNotToCountFoReal;
                                };          
      
      this.setItemsNotTocount = function(fromConfig){
                                _itemsNotToCountFoReal = angular.copy(fromConfig);
                                };

      this.$get = [

        function(){
    
          var Service = {};

          Service.getListItemCssClass = function(){                                               
                                        return _listDragDropItemCssClasses;
                                        };

          Service.getListControls = function(){
                                    return _initListControls;
                                    



                                    };
          
          /**
           * when counting items in a line : need to skip placeholder and hidden dragging source
           * to get the right css to apply visible items
           */
          Service.getItemsNotToCount = function(){
                                      return _itemsNotToCountFoReal;
                                      }; 
         
          /**
           * return css class to apply depending numberOfItems (in line) as input param                 
           */
          Service.getItemCssDependingNumberItemsInRow =  function(numberOfItems){
                                                          if(typeof numberOfItems !== 'undefined'){
                                                            var classToReturn = '';
                                                            for (var  i = _listDragDropItemCssClasses.length - 1; 
                                                                      i >= 0; 
                                                                      i--) {
                                                              if (_listDragDropItemCssClasses[i].numberItemPerRow === numberOfItems) {
                                                                classToReturn = _listDragDropItemCssClasses[i].cssClass;  
                                                              }
                                                            }
                                                            return classToReturn;
                                                          }else{
                                                            return '';
                                                          }     
                                                          };                                          
               
          Service.getDistinctItemCssClass = function(){
                                              var distinctCssClass = [];
                                              angular.forEach(_listDragDropItemCssClasses, function(valueRef){

                                                var cssClassRef = valueRef.cssClass;

                                                if (distinctCssClass.length === 0){
                                                  distinctCssClass.push(cssClassRef);
                                                } else {
                                                  var canAdd = true;

                                                  angular.forEach(distinctCssClass, function(valueProc){
                                                    var cssClassProc = valueProc;

                                                    if (cssClassRef === cssClassProc) {
                                                      canAdd = false;
                                                    }

                                                  });

                                                  if (canAdd) distinctCssClass.push(cssClassRef);
                                                }

                                              });
                                              return distinctCssClass;
                                            };               
          return Service;
        } 
      ];
}]);
/**
 *  ------------------------------------------------------
 *  provider : EasyFormGenFormlyBindingModels
 *  ------------------------------------------------------
 *
 *  configure all related to bing model (easy form generator - formly)
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp.providers.EasyFormGenFormlyBindingModels', [])
	.provider('EasyFormGenFormlyBindingModels', [

	function(){ 
		
		/**
		 * define all controls easy form genearator will manage
		 */
		var _easyFormListControls =	{

	                    controls : [],

	                      selectedControl : 'none' ,
	                      temporyConfig : {
	                                        selectedControl		: 'none',
	                                        formlyLabel				: 'label', 
	                                        formlyRequired		: false, 
	                                        formlyDesciption	: '',
	                                        formlyPlaceholder	: '',
	                                        formlyOptions 		: []
	                                      } 
		};

		/**
		 * formly field model (back model = configuration model)
		 * at initial state (1 line empty)
		 *
		 * If need a configuration before loading from database 
		 * or loading from saved object better use _easyFormReloadConfigurationModel 
		 */
		var _easyFormInitialStateConfigurationModel =  {                                
	    /**
	     * commun all easy form generator ways	
	     */
	    submitButtonText 	: 'submit',
	    cancelButtonText 	: 'cancel',
	    lines : [
	            {
	              line 					: 1,                                       
	              activeColumn 	: 1,
	              columns 			: [
	                                {  
	                                  numColumn 	: 1,
	                                  exist 			:true, 
	                                  control 		: {
	                                                  type:'none',
	                                                  key: 'none',
	                                                  // templateOptions: {
	                                                  //                     label: 'none',
	                                                  //                     placeholder: 'none',
	                                                  //                     required: false,
	                                                  //                     description: 'Descriptive text'
	                                                  //                   }
	                                                }
	                                  }
	                               ]
	             }                                 
	        ]
    };

    var _easyFormInitialStateConfigurationModelAddOnForStepWay = {
			/**
			 * specific easy form generator — step way — (not drag and drop way), needed for wizard management
			 */
	    activeLine 			: 1,   
	    listConfigStep 	: [
	                        'init',
	                        'first',
	                        'second',
	                        'third'
	                  		],
	    stepIndicators 	: [
	                        true,
	                        false,
	                        false,
	                        false
	                      ], 
	    configStepCounter : 0,     	
    };	


    var _easyFormReloadConfigurationModel =  {                                
	    /**
	     * commun all easy form generator ways	
	     *
	     * this model when loading as initial state 
	     * -> when then loading a previous configuration
	     * i.e. : loading from database
	     *
	     * If need a model for intitial state (without loadin data)
	     * better use _easyFormInitialStateConfigurationModel
	     */
	    submitButtonText 	: 'submit',
	    cancelButtonText 	: 'cancel',
	    lines : []
    };

    var _headerTemplates = 	{
    													cssClass 		: ['col-md-12', 'col-md-6', 'col-md-4'],
    													textContent : '',
    													html_part1 	: [
		                                          '<div class="row">',
		                                          '  <div class="">',
		                                          '    <h2 class="text-center">'
		                                         ].join(''),
		                          html_part2  : this.textContent,
		                          html_part3 	:  [ 
		                                          '    <h2>',
		                                          '    <hr/>',
		                                          '  </div>',
		                                          '</div>'
		                                         ].join(''),
    												};

    var _formlyControlTemplates =	{
		                                className : ['col-xs-12', 'col-xs-6', 'col-xs-4'],
		                                type      : '',
		                                key       : '',
		                                templateOptions: {
		                                    type        : '',
		                                    label       : '',
		                                    required    : '',
		                                    placeholder : '',
		                                    description : '',
		                                    options     : ''    
		                                }
		                              };

		var _particularControlProperties = 	[
																					{
																						controlType 	: 'datepicker',
																						properties 		: [	
																															{	
																																isRoot  					: false, 
																																isTemplateOptions : true, 
																																value 						: 'datepickerPopup'
																															}
																														]
																					}
																				];



		this.getAllParticularControlProperties = function(){
			/**
			 * 
			 */
			return _particularControlProperties;
		};

		this.addParticularControlProperties = function(newParticularControlProperty){
			/**
			 * test object param has waited properties
			 */
			if (('controlType' 	in newParticularControlProperty) &&
					('properties' 	in newParticularControlProperty)) {
				/**
				 * test controlType does not already exists
				 *
				 * here will update properties (correponding controlType) if already exists
				 */
				var isAnUpdate = false;
				if ( _particularControlProperties.length > 0 ) {

					_particularControlProperties.forEach(function(controlProp){

						if (controlProp.controlType === newParticularControlProperty.controlType) {
							controlProp.properties = [].concat(newParticularControlProperty.properties);
							isAnUpdate = true;
						}	
							
					});
				}
				/**
				 * it is no update so ; add newParticularControlProperty
				 */
				if (!isAnUpdate) {

					_particularControlProperties.push(newParticularControlProperty);

				}
				
			}

			return _particularControlProperties;			
		};





		this.getEasyFormListControls = function(){
			/**
			 * 
			 */
			return _easyFormListControls;
		};

		this.addEasyFormControlToList = function(controlDeclaration){
			if (typeof controlDeclaration !== 'undefined'){
				_easyFormListControls.controls.push(controlDeclaration);
			}
		};



		this.getHeaderTemplates = function(){
			/**
			 * 
			 */
			return _headerTemplates;
		};

		this.addHeaderTemplateCssClass = function(cssClassToAdd){
			if (typeof cssClassToAdd !== 'undefined') {
				_headerTemplates.cssClass.push(cssClassToAdd);
			}
		};





		this.getFormlyControlTemplate = function(){
			/**
			 * 
			 */
			return _formlyControlTemplates;
		};

		this.addformlyControlTemplatesCssClass = function(cssClassToAdd){
			if (typeof cssClassToAdd !== 'undefined') {
				_formlyControlTemplates.className.push(cssClassToAdd);
			}
		};
		/**
		 * setFormlyControlTemplate : ovverrides ControlTemplate
		 */
		this.setFormlyControlTemplate  = function(newFormlyControlTemplate){
			/**
			 * test object param has minimum waited properties
			 */
			if (('className'				in newFormlyControlTemplate) &&
					('type' 						in newFormlyControlTemplate) &&
					('key' 							in newFormlyControlTemplate) &&
					('templateOptions') in newFormlyControlTemplate) {
				_formlyControlTemplates = angular.copy(newFormlyControlTemplate);
			}
			return true;
		};

		/**
		 * TODO : add an extend properties method to _formlyControlTemplates
		 */
		
		this.$get =	[

			function(){
				var Service = {};

				Service.getEasyFormListControls = function(){
					return _easyFormListControls;
				};
				/**
				 * getEasyFormInitialStateConfigurationModel : get configuration model 
				 * (back model equivalent to formly field model) at "initial state = 1 empty line"
				 * 
				 * @param  bool addStepWayProperties  : add or not properties specefic to easy form generator step way
				 * @return object  configuration model
				 */
				Service.getEasyFormInitialStateConfigurationModel = function(addStepWayProperties){
					var initialConfigurationModel = angular.copy(_easyFormInitialStateConfigurationModel);
					if (typeof addStepWayProperties !== 'undefined') {
						if (addStepWayProperties) {
							/**
							 * add properties specific to step way
							 */
							angular.extend(initialConfigurationModel, _easyFormInitialStateConfigurationModelAddOnForStepWay);
						}
					}
					return initialConfigurationModel;
				};
				/**
				 * getEasyFormInitialStateConfigurationModel : get configuration model 
				 * (back model equivalent to formly field model) at "initial state = 0 line"
				 * => good model to load a previous saved into it (just load lines and buttons names then)
				 * 
				 * @param  bool addStepWayProperties  : add or not properties specefic to easy form generator step way
				 * @return object  configuration model
				 */
				Service.getEasyFormReloadConfigurationModel = function(addStepWayProperties){
					var initialConfigurationModel = angular.copy(_easyFormReloadConfigurationModel);
					if (typeof addStepWayProperties !== 'undefined') {
						if (addStepWayProperties) {
							/**
							 * add properties specific to step way
							 */
							angular.extend(initialConfigurationModel, _easyFormInitialStateConfigurationModelAddOnForStepWay);
						}
					}
					return initialConfigurationModel;
				};


				/**
				 *
				 *
				 * 
				 * TODO : helpers to improve "formfielMange Service"
				 *
				 * - objective it to replace Add N ColumnControl methods
				 * 
				 */

				/**
				 * getRawHeaderTemplates : return full headerTemplates object
				 *
				 * better use getHeaderTemplateForNcolumnLine to return a particular header template
				 */
				Service.getRawHeaderTemplates = function(){
					/**
					 * 
					 */
					return _headerTemplates;
				};
				/**
				 * [getHeaderTemplateForNcolumnLine : return a particular header template depending n columns in lines
				 * @param   nbColInLines : an integer reflecting numbers of column template
				 * @param   textContent  : header's text
				 * @return  an headerTemplate object
				 */
				Service.getHeaderTemplateForNcolumnLine = function(nbColInLines, textContent){
					if (typeof nbColInLines !== 'undefined' &&
							typeof textContent 	!== 'undefined') {

						if (nbColInLines === parseInt(nbColInLines, 10)) {

							if (nbColInLines <=  _headerTemplates.cssClass.length) {
							
					    	var headerToReturn = {};
					    	headerToReturn.className = _headerTemplates.cssClass[nbColInLines - 1];
					    	/**
					    	 * header html property depends this property dont forget to set it before reading html property
					    	 */
					    	_headerTemplates.textContent = textContent;

					    	headerToReturn.template = [
					    															_headerTemplates.html_part1,
					    															textContent,
					    															_headerTemplates.html_part3
					    														].join('');

					    	return headerToReturn;
				    	}

						}
					}
				};





				/**
				 * getRawFormlyControlTemplates : return full generic control templates object
				 *
				 * better use getFormlyControlTemplateForNcolumnLine to return a particular control template
				 */
				Service.getRawFormlyControlTemplates = function(){
					return _formlyControlTemplates;
				};
				/**
				 * [getFormlyControlTemplateForNcolumnLine : return a particular control template depending n columns in lines
				 * @param   nbColInLines : an integer reflecting numbers of column template
				 * @return  an empty generic control template object
				 */
				Service.getFormlyControlTemplateForNcolumnLine = function(nbColInLines, controlType){
					if (typeof nbColInLines !== 'undefined') {

						if (nbColInLines === parseInt(nbColInLines, 10)) {
							if (nbColInLines <=  _formlyControlTemplates.className.length) {

								var controlToReturn = angular.copy(_formlyControlTemplates);
								controlToReturn.className = _formlyControlTemplates.className[nbColInLines - 1];

								/**
								 * check controlType: it may require another particular property
								 */
								if (typeof controlType !== 'undefined') {

									_particularControlProperties.forEach(function(controlProp){

										if (controlProp.controlType === controlType) {
											/**
											 * add all properties this controlType has
											 * 
											 * NOTE : dot expression and bracket expression to access object property
											 * http://www.ecma-international.org/ecma-262/5.1/#sec-11.2.1
											 */										
											controlProp.properties.forEach(function(aPropToAdd){

												if (aPropToAdd.isRoot) controlToReturn[aPropToAdd.value] = '';
												if (aPropToAdd.isTemplateOptions) controlToReturn.templateOptions[aPropToAdd.value] = '';
												
											});

										}	
											
									});
								}

					    	return controlToReturn;
				    	}
						}
					}
				};
	
				return Service;

			}

		];	
		
	}]);
/**
 *  ------------------------------------------------------
 *  module = "providers" container
 *  ------------------------------------------------------
 *      Syntax (convention) :
 *          "ngwfApp" = application
 *          "ngwfApp.providers" = container services module
 *
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/

angular
	.module('ngwfApp.providers', [	'ngwfApp.providers.dragDropConfigProvider',
																	'ngwfApp.providers.EasyFormGenFormlyBindingModels', 
	function () {
	
	}]);

/**
 *  ------------------------------------------------------
 *  configuration ngwfDragAndDropConfig
 *  ------------------------------------------------------
 *
 * configuration related to drag and drop
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp')
	.config(['dragDropConfigProvider',

	function (dragDropConfigProvider) {

    dragDropConfigProvider.setItemsNotTocount({
                                                //placeholder :         '',
                                                itemBeingDragged :    'dndDraggingSource'    
                                              });
 
	}]);


/**
 *  ------------------------------------------------------
 *  configuration ngwfFormlyConfig
 *  ------------------------------------------------------
 *
 *  formly configuration
 * 
 * ——————————————————————————————————————————————
 * MIT (2015) - Erwan Datin (MacKentoch)
 * https://github.com/MacKentoch/easyFormGenerator
 * ——————————————————————————————————————————————
**/
angular
	.module('ngwfApp')
	.config([	'formlyConfigProvider',
						'EasyFormGenFormlyBindingModelsProvider',

	function (formlyConfigProvider, EasyFormGenFormlyBindingModelsProvider) {
		

		/**
		 * Add blanck control
		 *
		 * 1- in formlyConfigProvider
		 * 2- in EasyFormGenFormlyBindingModelsProvider
		 */
		formlyConfigProvider.setType(
		 	{
				name  		: 'blank',
				template 	: '<div></div>'
		  }
		);

		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
						id 								: 'empty',  
						name 							: 'no control', 
						subtitle 					: 'no control', 
						group 						: 'Blank', 
						formlyType 				: 'blank', 
						formlySubtype 		: '', 
						formlyLabel 			: '', 
						formlyRequired 		: false, 
						formlyDesciption 	: '', 
						formlyOptions 		: []
				}
		);

		/**
		 * Add header
		 *
		 * note : formly header template already exists
		 * no need to create a custom one
		 *
		 * just declare in EasyFormGenFormlyBindingModelsProvider
		 */
		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'Header',  
					name 							: 'Header', 
					subtitle 					: 'no control', 
					group 						: 'Decoration', 
					formlyType 				: 'header', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []
				}
		);

		/**
		 * Add subTitle control
		 *
		 * 1- in formlyConfigProvider
		 * 2- in EasyFormGenFormlyBindingModelsProvider
		 */
		var subTitleTemplate =	[
															'<div class="row">', 
															'  <div class="">', 
															'    <h4 class="text-center">{{options.templateOptions.placeholder}}<h4>', 
															'    <hr/>',
															'  </div>',
															'</div>'
														].join(' ');

		formlyConfigProvider.setType(
		 	{
				name 			: 'subTitle',
				template 	: subTitleTemplate
		  }
		);

		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'Subtitle',  
					name 							: 'Subtitle', 
					subtitle 					: 'no control', 
					group 						: 'Decoration', 
					formlyType 				: 'subTitle', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []
				}
		);

		/**
		 * Add text input (basic)
		 *
		 * note : formly template already exists
		 * no need to create a custom one
		 *
		 * just declare in EasyFormGenFormlyBindingModelsProvider
		 */
		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'TextInput',  
					name 							: 'Text input', 
					subtitle 					: 'Text input', 
					group 						: 'input', 
					formlyType 				: 'input', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []
				}
		);

		/**
		 * Add text input (Password)
		 *
		 * note : formly template already exists
		 * no need to create a custom one
		 *
		 * just declare in EasyFormGenFormlyBindingModelsProvider
		 */
		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'Password',  
					name 							: 'Password', 
					subtitle 					: 'Password', 
					group 						: 'input', 
					formlyType 				: 'input', 
					formlySubtype 		: 'password', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []}
		);

		/**
		 * Add angular UI date picker
		 *
		 * thx Kent C. Dodds for formly config template (since it was a huge config)
		 */
		var attributes =	[
												'date-disabled',
												'custom-class',
												'show-weeks',
												'starting-day',
												'init-date',
												'min-mode',
												'max-mode',
												'format-day',
												'format-month',
												'format-year',
												'format-day-header',
												'format-day-title',
												'format-month-title',
												'year-range',
												'shortcut-propagation',
												'datepicker-popup',
												'show-button-bar',
												'current-text',
												'clear-text',
												'close-text',
												'close-on-date-selection',
												'datepicker-append-to-body'
											];

		var bindings =	[
											'datepicker-mode',
											'min-date',
											'max-date'
										];

		var ngModelAttrs = {};

		angular.forEach(attributes, function(attr) {
		  ngModelAttrs[camelize(attr)] = {attribute: attr};
		});

		angular.forEach(bindings, function(binding) {
		  ngModelAttrs[camelize(binding)] = {bound: binding};
		});

	  function camelize(string) {
	    string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
	      return chr ? chr.toUpperCase() : '';
	    });
	    // Ensure 1st char is always lowercase
	    return string.replace(/^([A-Z])/, function(match, chr) {
	      return chr ? chr.toLowerCase() : '';
	    });
	  } 		

	  var angularUIDatePickerTemplate =	[
																				'<input ',
																				'      id="{{id}}" ',
																				'      class="form-control" ',
																				'      ng-click="open($event)"',
																				'      ng-model="model[options.key || index]" is-open="to.isOpen"',
																				'      ng-click="to.isOpen = true" ',
																				'      datepicker-options="to.datepickerOptions"',
																				'/>'
	  																	].join(' ');
 
		formlyConfigProvider.setType({
		  name 				: 'datepicker',
		  template 		: angularUIDatePickerTemplate,
		  wrapper 		: ['bootstrapLabel', 'bootstrapHasError'],
		  controller 	: [	'$scope', 
		  								function($scope) {
														     $scope.open = function($event) {
														      $event.preventDefault();
														      $event.stopPropagation();
														      $scope.opened = true;
														    };
		   								}
		   							],
		  defaultOptions : {
										    ngModelAttrs 		: ngModelAttrs,
										    templateOptions : {
																			      addonLeft: {
																			        class: 'glyphicon glyphicon-calendar',
																			        onClick: function(options) {
																			          options.templateOptions.isOpen = !options.templateOptions.isOpen;
																			        }
																			      },       
																			      onFocus: function($viewValue, $modelValue, scope) {
																			        scope.to.isOpen = !scope.to.isOpen;
																			      },
											      								datepickerOptions: {}
										    								}
		  }
		});

		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'Date',  
					name 							: 'Date', 
					subtitle 					: 'Date', 
					group 						: 'input', 
					formlyType 				: 'datepicker', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: [], 
					datepickerPopup 	: 'dd-MMMM-yyyy'
				}
		);

		/**
		 * Add textarea
		 *
		 * note : formly template already exists
		 * no need to create a custom one
		 *
		 * just declare in EasyFormGenFormlyBindingModelsProvider
		 */
		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'Texarea', 
					name 							: 'Textarea', 
					subtitle 					: 'Textarea', 
					group 						: 'Textarea', 
					formlyType 				: 'textarea', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []
				}
		);		

		/**
		 * Add rich text editor control
		 *
		 */
		var richTexEditorTemplate =	[
																	'<text-angular name="{{id}}" ', 
																	'              class="richTextAngular" ',
																	'              ng-model="model[options.key || index]">', 
																	'</text-angular>'
																].join(' ');
		formlyConfigProvider.setType(
		  {
				name     	: 'richEditor',
				template 	: richTexEditorTemplate
		  }
		);

		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'RichTextEditor', 
					name 							: 'RichTextEditor', 
					subtitle 					: 'RichTextEditor', 
					group 						: 'Textarea', 
					formlyType 				: 'richEditor', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []
				}
		);

		/**
		 * Add textarea
		 *
		 * note : formly template already exists
		 * no need to create a custom one
		 *
		 * just declare in EasyFormGenFormlyBindingModelsProvider
		 */
		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'Radio', 
					name 							: 'Radio', 
					subtitle 					: 'Radio', 
					options 					: [], 
					group 						: 'Radio', 
					formlyType 				: 'radio', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '' , 
					formlyOptions 		: []
				}
		);		

		/**
		 * Add checkbox
		 *
		 * note : formly template already exists
		 * no need to create a custom one
		 *
		 * just declare in EasyFormGenFormlyBindingModelsProvider
		 */
		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'Checkbox', 
					name 							: 'Checkbox', 
					subtitle 					: 'Checkbox', 
					group 						: 'Checkbox', 
					formlyType 				: 'checkbox', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []
				}
		);

		/**
		 * Add basic Select control
		 *
		 * using nya-bs-select
		 */
		var basicSelectTemplate =	[
																' <ol class="nya-bs-select col-sm-12 col-xs-12 col-md-12 col-lg12" ', 
																'		ng-model="model[options.key || index]"  ', 
																'		id="{{id}}"  ', 
																'		disabled="options.templateOptions.options.length === 0"> ',
																'   <li class="nya-bs-option" nya-bs-option="option in options.templateOptions.options"> ',
																'     <a>{{option.name}}</a> ',
																'   </li> ',
																' </ol> '
															].join(''); 	

		formlyConfigProvider.setType(
		 	{
				name 			: 'basicSelect',
				template 	: basicSelectTemplate
		  }
		);

		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'BasicSelect', 
					name 							: 'Basic select', 
					subtitle 					: 'Basic select',
					options 					: [], 
					group 						: 'Select', 
					formlyType 				: 'basicSelect', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []
				}
		);		

		/**
		 * Add Grouped Select control
		 *
		 * using nya-bs-select
		 */
    var groupedSelectTemplate =	[
																		'  <ol class="nya-bs-select col-sm-12 col-xs-12 col-md-12 col-lg12" ',
																		'		   ng-model="model[options.key || index]" ',
																		'      data-live-search="true" ',
																		'      disabled="options.templateOptions.options.length === 0">',
																		'      <li nya-bs-option="option in  options.templateOptions.options group by option.group">  ',
																		'        <span class="dropdown-header">{{$group}}</span>',
																		'        <a>',
																		'          <span>{{option.name}}</span>',
																		'          <span class="glyphicon glyphicon-ok check-mark"></span>',
																		'        </a>',
																		'      </li>',
																		'  </ol>'
     															].join(' ');
		formlyConfigProvider.setType(
			{
				name   		: 'groupedSelect',
				template 	: groupedSelectTemplate
			}
		);

		EasyFormGenFormlyBindingModelsProvider.addEasyFormControlToList(
				{
					id 								: 'GroupedSelect', 
					name 							: 'Grouped Select', 
					subtitle 					: 'Grouped Select',
					options 					: [], 
					group 						: 'Select', 
					formlyType 				: 'groupedSelect', 
					formlySubtype 		: '', 
					formlyLabel 			: '', 
					formlyRequired 		: false, 
					formlyDesciption 	: '', 
					formlyOptions 		: []}
		);			

 
	}]);


})();
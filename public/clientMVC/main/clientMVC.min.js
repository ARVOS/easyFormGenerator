/* 
 easyFormGenerator 
 Version 1.0.4 
 Author : Erwan Datin (MacKentoch) 
 Link: https://github.com/MacKentoch/easyFormGenerator 
 License : MIT (2015) 
*/ 
;(function(){
"use strict";
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// 
//  ------------------------------------------------------
//      Application module
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application Name (could be per view)
//
//  All angular modules loaded here (injected)
//
// TIP : remove console.log verbose on production
//
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

var ngwfApp = angular.module('ngwfApp', [	
												'ngwfApp.controllers',
												'ngwfApp.services', 
												'ngwfApp.filters',
												'ngwfApp.directives',
												'textAngular',
												'textAngularSetup',
												'ngAnimate',
												'toaster',											
												'formly', 
												'formlyBootstrap',
												'ui.bootstrap',
												'nya.bootstrap.select',
                        'duScroll',
                        'ngClipboard',
                        'ng-code-mirror',
												function () {
    //verbose init is ok  
    console.log('--> INIT : Hello application :  \'\'ngwfApp\'\' ');

}]);



//////////////////////////////
// CONFIG HERE (formly...)							
/////////////////////////////
ngwfApp.config([	'formlyConfigProvider', 
                   'ngClipProvider', 
					         function(formlyConfigProvider, ngClipProvider) {

    //clip copy needed :                
    ngClipProvider.setPath("./public/lib/swf/ZeroClipboard.swf");                

    //formly needed then :
    formlyConfigProvider.setType(
	    {
	  		name: 'richEditor',
	  		template: '<text-angular class="richTextAngular" ng-model="model[options.key || index]"></text-angular>'
	    }
    );

    formlyConfigProvider.setType(
	   	{
	  		name: 'blank',
	  		template: '<div></div>'
	    }
    );


    var subTitleTemplate = '<div class="row"><div class=""><h4 class="text-center">{{options.templateOptions.placeholder}}<h4><hr/></div></div>';
    formlyConfigProvider.setType(
	   	{
	  		name: 'subTitle',
	  		template: subTitleTemplate
	    }
    );

	var basicSelectTemplate =  	' <ol 	class="nya-bs-select col-sm-12 col-xs-12 col-md-12 col-lg12" ' + 
								'		ng-model="model[options.key || index]"  ' + 
							    '		id="{{id}}"  ' + 
							    '		disabled="options.templateOptions.options.length === 0"> ' + 
							    '   <li class="nya-bs-option" nya-bs-option="option in options.templateOptions.options"> ' + 
							    '     <a>{{option.name}}</a> ' + 
							    '   </li> ' + 
							    ' </ol>     ' ;

   formlyConfigProvider.setType(
	   	{
	  		name: 'basicSelect',
	  		template: basicSelectTemplate
	    }
    );


     var groupedSelectTemplate =   '  <ol class="nya-bs-select col-sm-12 col-xs-12 col-md-12 col-lg12" ' +
   								 '		ng-model="model[options.key || index]" ' +
   								 '       data-live-search="true" ' +
   								 '       disabled="options.templateOptions.options.length === 0">' +
                                 '       <li nya-bs-option="option in  options.templateOptions.options group by option.group"  ' +
                                 '       >' +
                                 '         <span class="dropdown-header">{{$group}}</span>' + 
                                 '         <a>' +
                                 '           <span>{{option.name}}</span>' +
                                 '           <span class="glyphicon glyphicon-ok check-mark"></span>' +
                                 '         </a>' +
                                 '       </li>' +
                                 '     </ol>';

   formlyConfigProvider.setType(
	   	{
	  		name: 'groupedSelect',
	  		template: groupedSelectTemplate
	    }
    );

   ////////////////////////////
   // angular UI date picker
   ////////////////////////////
   // thx Kent C. Dodds

  var attributes = [
    'date-disabled',
    'custom-class',
    'show-weeks',
    'starting-day',
    'init-date',
    'min-mode',
    'max-mode',
    'format-day',
    'format-month',
    'format-year',
    'format-day-header',
    'format-day-title',
    'format-month-title',
    'year-range',
    'shortcut-propagation',
    'datepicker-popup',
    'show-button-bar',
    'current-text',
    'clear-text',
    'close-text',
    'close-on-date-selection',
    'datepicker-append-to-body'
  ];

  var bindings = [
    'datepicker-mode',
    'min-date',
    'max-date'
  ];

  var ngModelAttrs = {};

  angular.forEach(attributes, function(attr) {
    ngModelAttrs[camelize(attr)] = {attribute: attr};
  });

  angular.forEach(bindings, function(binding) {
    ngModelAttrs[camelize(binding)] = {bound: binding};
  });

  console.log(ngModelAttrs);
  

  formlyConfigProvider.setType({
    name: 'datepicker',
    template: '<input  id="{{id}}" class="form-control" ng-click="open($event)" ng-model="model[options.key  || index]" is-open="to.isOpen" ng-click="to.isOpen = true" datepicker-options="to.datepickerOptions" />',
    wrapper: ['bootstrapLabel', 'bootstrapHasError'],
    controller: ['$scope', function($scope) {
       $scope.open = function($event) {
        $event.preventDefault();
        $event.stopPropagation();
        $scope.opened = true;
      };
     
     }],
    defaultOptions: {
      ngModelAttrs: ngModelAttrs,
      templateOptions: {
        addonLeft: {
          class: 'glyphicon glyphicon-calendar',
          onClick: function(options, scope) {
            options.templateOptions.isOpen = !options.templateOptions.isOpen;
          }
        },       
        onFocus: function($viewValue, $modelValue, scope) {
          scope.to.isOpen = !scope.to.isOpen;
        },
        datepickerOptions: {}
      }
    }
    
  });

  function camelize(string) {
    string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) {
      return chr ? chr.toUpperCase() : '';
    });
    // Ensure 1st char is always lowercase
    return string.replace(/^([A-Z])/, function(match, chr) {
      return chr ? chr.toLowerCase() : '';
    });
  } 

 }]);   
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "controllers" container
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers" = container controller module
//
//  This module is a container -> it must be injected in the application -> so it will inject all controllers injected here
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular.module('ngwfApp.controllers', [	'ngwfApp.controllers.ngwfMainController',
										'ngwfApp.controllers.ngwfWfEditController',
										'ngwfApp.controllers.ngwfWfEditMODALController',
										'ngwfApp.controllers.ngwfImageCarouselModalController',	
										'ngwfApp.controllers.ngwfModalSaveResult2HtmlController',						
										function () {
    //verbose
    console.log('--> INIT : Hello controllers container  \'\'ngwfApp.controllers\'\' ');
}]);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "controllers"  for view "imgCarouselModalCTRL"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.ngwfMainController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfImageCarouselModalController = angular.module('ngwfApp.controllers.ngwfImageCarouselModalController', []);

ngwfImageCarouselModalController.controller('imgCarouselModalCTRL', [ '$scope', 
                                                                      '$modalInstance', 
                                                                      function (  $scope, 
                                                                                  $modalInstance) {
    //verbose
    console.log('--> INIT : Hello controller  \'\'imgCarouselModalCTRL\'\' ');
      	
         $scope.ok = function () {

            $modalInstance.close({returnVal: true});
          };

          $scope.cancel = function () {
            $modalInstance.dismiss('cancel');
          };



          //carousel
          $scope.myInterval = 5000;
          var slides = $scope.slides = [];

          $scope.addSlide = function() {
            var newWidth = 600 + slides.length + 1;
            slides.push({
              image: ['./public/images/previewform.png','./public/images/designYourForm.png', './public/images/divideLinesColumns.png'][slides.length % 3],
               text: ['Preview','Design your form','Form layout'][slides.length % 3]
            });
          };

          for (var i=0; i<3; i++) {
            $scope.addSlide();
          }


}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "controllers"  for view "ngwfMainController"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.ngwfMainController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfMainController = angular.module('ngwfApp.controllers.ngwfMainController', []);

ngwfMainController.controller('ngwfMainController', [	'$scope', 
														'$document', 
														'$modal',
														'$log', 
														function (	$scope, 
																	$document, 
																	$modal, 
																	$log) {

    //verbose
    console.log('--> INIT : Hello controller  \'\'ngwfMainController\'\' ');
      	
      	//navbar model (ie : css on scroll)
      	$scope.scrollflag = {};
   		$scope.scrollflag.boolNavBarChangeClass = false;
   		$scope.scrollflag.boolBottomButtonChangeClass = false;


   		//to hide when done (just a desing helper)
	  	$document.on('scroll', function() {
	      console.log('Document scrolled to ', $document.scrollLeft(), $document.scrollTop());
	    });


	  	$scope.openImgCarousel = function(){
            var modalInstance = $modal.open({
              animation: true,
              templateUrl: 'imgCarouselModelTemplate.html',
              controller: 'imgCarouselModalCTRL',
              size: 'lg'//,
              // resolve: {
              //   items: function () {
              //     return true; //$scope.items;
              //   }
              //}
            });

            modalInstance.result.then(function (returnValFromImgModal) {
              $scope.returnfromImgCarouselModal = returnValFromImgModal;
            }, function () {
              $log.info('Modal dismissed at: ' + new Date());
            });
          };
	  

}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "controllers"  for view "imgCarouselModalCTRL"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.ngwfMainController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfModalSaveResult2HtmlController = angular.module('ngwfApp.controllers.ngwfModalSaveResult2HtmlController', []);

ngwfModalSaveResult2HtmlController.controller('modalSaveResult2Html', [ '$scope', 
                                                                      	'$modalInstance', 
                                                                      	'resultToSave',
                                                                      function (  $scope, 
                                                                                  $modalInstance,
                                                                                  resultToSave) {
    //verbose
    console.log('--> INIT : Hello controller  \'\'modalSaveResult2Html\'\' ');
      	


 // $scope.resultToSave = {
 //    fieldsModel : [],
 //    dataModel : {},
 //    submitBtnText : 'Submit',
 //    cancelBtnText : 'Cancel'

 //  };

 //json resultToSave.fieldsModel

        //$scope.vm.model= {};
        //$scope.vm.fields = [];

        //angular.copy(resultToSave ,$scope.vm.fields);

      	console.info('----- modalSaveResult2Html received object : ');
      	console.dir(resultToSave);



         $scope.okSaveResult2Html = function () {

            $modalInstance.close({returnVal: true});
          };

          $scope.cancelSaveResult2Html = function () {
            $modalInstance.dismiss('cancel');
          };



          var resultStringToSave = '<!DOCTYPE html> \n' +
          '<html> \n' +
          '  <head> \n' +
          '    <script src="https://ajax.googleapis.com/ajax/libs/angularjs/1.3.16/angular.min.js"></script> \n' +
          '    <!-- Bootstrap core CSS --> \n' +
          '    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css"> \n' +
          '    <!-- Bootswatch "paper" used in easy form website : feel free to use your own --> \n' +
          '    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootswatch/3.3.5/paper/bootstrap.min.css"> \n' +
          '    <!-- font-awesome --> \n' +
          '    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.3.0/css/font-awesome.min.css"> \n' +
          '    <!-- animate --> \n' +
          '    <link href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/3.3.0/animate.min.css" rel="stylesheet"> \n' +
          '    <!-- textAngular --> \n' +
          '    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/textAngular/1.4.1/dist/textAngular.css"> \n' +
          '    <!-- This is nya select : bootstrap template style  -->     \n' +
          '    <link href="https://rawgit.com/lordfriend/nya-bootstrap-select/master/dist/css/nya-bs-select.min.css" rel="stylesheet">     \n' +
          '    <style type="text/css"> \n' +
          '      body { \n' +
          '        margin: 20px \n' +
          '      } \n' +
          '      .formly-field { \n' +
          '        margin-bottom: 16px; \n' +
          '      } \n' +
          '    </style> \n' +
          '    <title>Your form</title> \n' +
          '  </head> \n' +
          '  <body ng-app="demoApp" ng-controller="MainCtrl as vm"> \n' +
          '    <div> \n' +
          '      <div class="jumbotron text-center"> \n' +
          '        <h1>Congratulation! &nbsp;<i class="fa fa-thumbs-o-up"></i></h1> \n' +
          '        <p>here is your form you\'ve just created :</p> \n' +
          '      </div> \n' +
          '      <hr /> \n' +
          ' \n' +
          '      <div class="container"> \n' +
          '        <div class="row"> \n' +
          '          <div class="col-xs-12"> \n' +
          ' \n' +
          '            <!-- here is the simple HTML you need (everything else is decoration) : --> \n' +
          '            <form ng-submit="vm.onSubmit()" name="vm.form" novalidate> \n' +
          '              <formly-form model="vm.model" fields="vm.fields" options="vm.options" form="vm.form"> \n' +
          '                <button type="submit" class="btn btn-primary submit-button pull-right" ng-disabled="vm.form.$invalid">{{vm.buttons.submit}}</button> \n' +
          '                <button type="button" class="btn btn-primary pull-right" ng-click="vm.options.resetModel()">{{vm.buttons.cancel}}</button> \n' +
          '              </formly-form> \n' +
          '            </form> \n' +
          ' \n' +
          '          </div> \n' +
          '        </div> \n' +
          '      </div> \n' +
          '    </div> \n' +
          ' \n' +
          '      <!-- jquery framework --> \n' +
          '      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.2/jquery.min.js"></script> \n' +
          '      <!-- bootstrap framework scripts --> \n' +
          '      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.5/js/bootstrap.min.js"></script> \n' +
          '      <!-- angular ui bootstrap --> \n' +
          '      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/angular-ui-bootstrap/0.13.0/ui-bootstrap-tpls.min.js"></script> \n' +
          '      <!-- textAngular Includes --> \n' +
          '      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/textAngular/1.4.1/dist/textAngular-rangy.min.js"></script> \n' +
          '      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/textAngular/1.4.1/dist/textAngular-sanitize.min.js"></script> \n' +
          '      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/textAngular/1.4.1/dist/textAngular.min.js"></script>  \n' +
          '      <!-- This is nya select : bootstrap template js  --> \n' +
          '      <script src="https://rawgit.com/lordfriend/nya-bootstrap-select/master/dist/js/nya-bs-select.min.js"></script> \n' +
          '      <!-- apiCheck is used by formly to validate its api --> \n' +
          '      <script src="https://rawgit.com/kentcdodds/api-check/master/dist/api-check.min.js"></script> \n' +
          '      <!-- This is the current state of master for formly core. --> \n' +
          '      <script src="https://rawgit.com/formly-js/angular-formly/master/dist/formly.js"></script> \n' +
          '      <!-- This is the current state of master for the bootstrap templates --> \n' +
          '      <script src="https://rawgit.com/formly-js/angular-formly-templates-bootstrap/master/dist/angular-formly-templates-bootstrap.js"></script> \n' +
          '      <!-- angular scripts : --> \n' +
          '      <script type="text/javascript"> \n' +
          '      ////////////////////////////// \n' +
          '      // demo application \n' +
          '      ///////////////////////////// \n' +
          '      var demoApp = angular.module(\'demoApp\', [  \n' +
          '                                              \'textAngular\',  \n' +                  
          '                                              \'formly\',  \n' +
          '                                              \'formlyBootstrap\', \n' +
          '                                              \'ui.bootstrap\', \n' +
          '                                              \'nya.bootstrap.select\', \n' +
          '                                              function () { \n' +
          '      }]); \n' +
          '      ////////////////////////////// \n' +
          '      // CONFIG HERE               \n' +
          '      ///////////////////////////// \n' +
          '      demoApp.config([  \'formlyConfigProvider\',  \n' +
          '                        function(formlyConfigProvider) { \n' +
          '          formlyConfigProvider.setType( \n' +
          '            { \n' +
          '              name: \'richEditor\', \n' +
          '              template: \'<text-angular class="richTextAngular" ng-model="model[options.key || index]"></text-angular>\' \n' +
          '            } \n' +
          '          ); \n' +
          '          formlyConfigProvider.setType( \n' +
          '            { \n' +
          '              name: \'blank\', \n' +
          '              template: \'<div></div>\' \n' +
          '            } \n' +
          '          ); \n' +
          '          var subTitleTemplate = \'<div class="row"><div class=""><h4 class="text-center">{{options.templateOptions.placeholder}}<h4><hr/></div></div>\'; \n' +
          '          formlyConfigProvider.setType( \n' +
          '            { \n' +
          '              name: \'subTitle\', \n' +
          '              template: subTitleTemplate \n' +
          '            } \n' +
          '          ); \n' +
          '        var basicSelectTemplate =   \' <ol   class="nya-bs-select col-sm-12 col-xs-12 col-md-12 col-lg12" \' +  \n' +
          '                                    \'   ng-model="model[options.key || index]"  \' +  \n' +
          '                                    \'   id="{{id}}"  \' +  \n' +
          '                                    \'   disabled="options.templateOptions.options.length === 0"> \' +  \n' +
          '                                    \'   <li class="nya-bs-option" nya-bs-option="option in options.templateOptions.options"> \' +  \n' +
          '                                    \'     <a>{{option.name}}</a> \' +  \n' +
          '                                    \'   </li> \' +  \n' +
          '                                    \' </ol>     \' ; \n' +
          '         formlyConfigProvider.setType( \n' +
          '            { \n' +
          '              name: \'basicSelect\', \n' +
          '              template: basicSelectTemplate \n' +
          '            } \n' +
          '          ); \n' +
          '          var groupedSelectTemplate =   \'  <ol class="nya-bs-select col-sm-12 col-xs-12 col-md-12 col-lg12" \' + \n' +
          '                                        \'    ng-model="model[options.key || index]" \' + \n' +
          '                                        \'       data-live-search="true" \' + \n' +
          '                                        \'       disabled="options.templateOptions.options.length === 0">\' + \n' +
          '                                        \'       <li nya-bs-option="option in  options.templateOptions.options group by option.group"  \' + \n' +
          '                                        \'       >\' + \n' +
          '                                        \'         <span class="dropdown-header">{{$group}}</span>\' +  \n' +
          '                                        \'         <a>\' + \n' +
          '                                        \'           <span>{{option.name}}</span>\' + \n' +
          '                                        \'           <span class="glyphicon glyphicon-ok check-mark"></span>\' + \n' +
          '                                        \'         </a>\' + \n' +
          '                                        \'       </li>\' + \n' +
          '                                        \'     </ol>\'; \n' +
          '         formlyConfigProvider.setType( \n' +
          '            { \n' +
          '              name: \'groupedSelect\', \n' +
          '              template: groupedSelectTemplate \n' +
          '            } \n' +
          '          ); \n' +
          '         // angular UI date picker \n' +
          '         // thx Kent C. Dodds \n' +
          '        var attributes = [ \n' +
          '          \'date-disabled\', \n' +
          '          \'custom-class\', \n' +
          '          \'show-weeks\', \n' +
          '          \'starting-day\', \n' +
          '          \'init-date\', \n' +
          '          \'min-mode\', \n' +
          '          \'max-mode\', \n' +
          '          \'format-day\', \n' +
          '          \'format-month\', \n' +
          '          \'format-year\', \n' +
          '          \'format-day-header\', \n' +
          '          \'format-day-title\', \n' +
          '          \'format-month-title\', \n' +
          '          \'year-range\', \n' +
          '          \'shortcut-propagation\', \n' +
          '          \'datepicker-popup\', \n' +
          '          \'show-button-bar\', \n' +
          '          \'current-text\', \n' +
          '          \'clear-text\', \n' +
          '          \'close-text\', \n' +
          '          \'close-on-date-selection\', \n' +
          '          \'datepicker-append-to-body\' \n' +
          '        ]; \n' +
          '        var bindings = [ \n' +
          '          \'datepicker-mode\', \n' +
          '          \'min-date\', \n' +
          '          \'max-date\' \n' +
          '        ]; \n' +
          '        var ngModelAttrs = {}; \n' +
          '        angular.forEach(attributes, function(attr) { \n' +
          '          ngModelAttrs[camelize(attr)] = {attribute: attr}; \n' +
          '        }); \n' +
          '        angular.forEach(bindings, function(binding) { \n' +
          '          ngModelAttrs[camelize(binding)] = {bound: binding}; \n' +
          '        }); \n' +
          '        formlyConfigProvider.setType({ \n' +
          '          name: \'datepicker\', \n' +
          '          template: \'<input  id="{{id}}" class="form-control" ng-click="open($event)" ng-model="model[options.key  || index]" is-open="to.isOpen" ng-click="to.isOpen = true" datepicker-options="to.datepickerOptions" />\', \n' +
          '          wrapper: [\'bootstrapLabel\', \'bootstrapHasError\'], \n' +
          '          controller: [\'$scope\', function($scope) { \n' +
          '             $scope.open = function($event) { \n' +
          '              $event.preventDefault(); \n' +
          '              $event.stopPropagation(); \n' +
          '              $scope.opened = true; \n' +
          '            }; \n' +
          '           }], \n' +
          '          defaultOptions: { \n' +
          '            ngModelAttrs: ngModelAttrs, \n' +
          '            templateOptions: { \n' +
          '              addonLeft: { \n' +
          '                class: \'glyphicon glyphicon-calendar\', \n' +
          '                onClick: function(options, scope) { \n' +
          '                  options.templateOptions.isOpen = !options.templateOptions.isOpen; \n' +
          '                } \n' +
          '              },        \n' +
          '              onFocus: function($viewValue, $modelValue, scope) { \n' +
          '                scope.to.isOpen = !scope.to.isOpen; \n' +
          '              }, \n' +
          '              datepickerOptions: {} \n' +
          '            } \n' +
          '          } \n' +
          '        }); \n' +
          '        function camelize(string) { \n' +
          '          string = string.replace(/[\-_\s]+(.)?/g, function(match, chr) { \n' +
          '            return chr ? chr.toUpperCase() : \'\'; \n' +
          '          }); \n' +
          '          // Ensure 1st char is always lowercase \n' +
          '          return string.replace(/^([A-Z])/, function(match, chr) { \n' +
          '            return chr ? chr.toLowerCase() : \'\'; \n' +
          '          }); \n' +
          '        }  \n' +
          '       }]);    \n' +
          '      ////////////////////////////////////////// \n' +
          '      // demo controller \n' +
          '      ////////////////////////////////////////// \n' +
          '      demoApp.controller(\'MainCtrl\', [\'$scope\',      \n' +          
          '                                      function ($scope, formlyVersion) { \n' +
          '         console.info(\'controller loaded\'); \n' +
          '         // submit function assignment \n' +
          '          $scope.vm.onSubmit = onSubmit; \n' +
          '          ///////////////////////// \n' +
          '          // variable assignment \n' +
          '          ///////////////////////// \n' +
          '          //data model here : \n' +
          '          $scope.vm.model = {}; \n' +
          '          //this model is the initial one \n' +
          '          $scope.vm.initialFieldsModel =' + JSON.stringify(resultToSave.fieldsModel) + ';\n' +
          '          $scope.vm.buttons = { \n' +
          '                                "submit" : "' + resultToSave.submitBtnText +'", \n' +
          '                                "cancel" : "' + resultToSave.cancelBtnText + '" \n' +
          '          }; \n' +
          '          ////////////////////////////////////////////////////// \n' +
          '          //this model "vm.fields" will be bound to formly  \n' +
          '          //-> initialisation from $scope.vm.initialFieldsModel   \n' +                        
          '          ////////////////////////////////////////////////////// \n' +
          '          $scope.vm.fields = angular.copy($scope.vm.initialFieldsModel); \n' +
          '          // onSubmit function definition : \n' +
          '          function onSubmit() { \n' +
          '            //an alert of the data model \n' +
          '            alert(JSON.stringify($scope.vm.model), null, 2); \n' +
          '          } \n' +                                               
          '      }]); \n' +
          '      </script> \n' +
          '  </body> \n' +
          '</html>'; 

          // '              [{ \n' +
          // '                "template": "<div class=\"row\"><div class=\"col-xs-12 col-sm-12 col-md-12 col-lg-12\"><h2 class=\"text-center\">Form main title here<h2></div></div><hr/>" \n' +
          // '              }, \n' +
          // '              { \n' +
          // '                "className": "col-xs-12", \n' +
          // '                "type": "subTitle", \n' +
          // '                "key": "subTitle-1435697348926", \n' +
          // '                "templateOptions": { \n' +
          // '                  "type": "", \n' +
          // '                  "label": "", \n' +
          // '                  "required": false, \n' +
          // '                  "placeholder": "Subtitle : here fist line of the form", \n' +
          // '                  "description": "", \n' +
          // '                  "options": [] \n' +
          // '                } \n' +
          // '              }, \n' +
          // '              { \n' +
          // '                "className": "row", \n' +
          // '                "fieldGroup": [ \n' +
          // '                  { \n' +
          // '                    "className": "col-xs-4", \n' +
          // '                    "type": "input", \n' +
          // '                    "key": "input-1435697627668", \n' +
          // '                    "templateOptions": { \n' +
          // '                      "type": "", \n' +
          // '                      "label": "A text input :", \n' +
          // '                      "required": true, \n' +
          // '                      "placeholder": "enter some text here", \n' +
          // '                      "description": "This text input will be required", \n' +
          // '                      "options": [] \n' +
          // '                    } \n' +
          // '                  }, \n' +
          // '                  { \n' +
          // '                    "className": "col-xs-4", \n' +
          // '                    "type": "input", \n' +
          // '                    "key": "input-1435697624234", \n' +
          // '                    "templateOptions": { \n' +
          // '                      "type": "password", \n' +
          // '                      "label": "A password input :", \n' +
          // '                      "required": true, \n' +
          // '                      "placeholder": "enter a password (fake is ok too)", \n' +
          // '                      "description": "This password is required (not blank is a good password)", \n' +
          // '                      "options": [] \n' +
          // '                    } \n' +
          // '                  }, \n' +
          // '                  { \n' +
          // '                    "className": "col-xs-4", \n' +
          // '                    "type": "datepicker", \n' +
          // '                    "key": "datepicker-1435697618753", \n' +
          // '                    "templateOptions": { \n' +
          // '                      "type": "", \n' +
          // '                      "label": "A date input :", \n' +
          // '                      "required": false, \n' +
          // '                      "placeholder": "", \n' +
          // '                      "description": "This is not required", \n' +
          // '                      "options": [], \n' +
          // '                      "datepickerPopup": "" \n' +
          // '                    } \n' +
          // '                  } \n' +
          // '                ] \n' +
          // '              }, \n' +
          // '              { \n' +
          // '                "className": "row", \n' +
          // '                "fieldGroup": [ \n' +
          // '                  { \n' +
          // '                    "className": "col-xs-4", \n' +
          // '                    "type": "basicSelect", \n' +
          // '                    "key": "basicSelect-1435697684269", \n' +
          // '                    "templateOptions": { \n' +
          // '                      "type": "", \n' +
          // '                      "label": "",  \n' +
          // '                      "required": false, \n' +
          // '                      "placeholder": "", \n' +
          // '                      "description": "A basic select (nya bs select)", \n' +
          // '                      "options": [ \n' +
          // '                        { \n' +
          // '                          "name": "option1", \n' +
          // '                          "value": 0, \n' +
          // '                          "group": "" \n' +
          // '                        }, \n' +
          // '                        { \n' +
          // '                          "name": "option2", \n' +
          // '                          "value": 1, \n' +
          // '                          "group": "" \n' +
          // '                        } \n' +
          // '                      ] \n' +
          // '                    } \n' +
          // '                  }, \n' +
          // '                  { \n' +
          // '                    "className": "col-xs-4", \n' +
          // '                    "type": "groupedSelect", \n' +
          // '                    "key": "groupedSelect-1435697705089", \n' +
          // '                    "templateOptions": { \n' +
          // '                      "type": "", \n' +
          // '                      "label": "", \n' +
          // '                      "required": false, \n' +
          // '                      "placeholder": "", \n' +
          // '                      "description": "A grouped select with live search (nya bs select)", \n' +
          // '                      "options": [ \n' +
          // '                        { \n' +
          // '                          "name": "option 1", \n' +
          // '                          "value": 0, \n' +
          // '                          "group": "group 1" \n' +
          // '                        }, \n' +
          // '                        { \n' +
          // '                          "name": "option 2", \n' +
          // '                          "value": 1, \n' +
          // '                          "group": "" \n' +
          // '                        } \n' +
          // '                      ] \n' +
          // '                    } \n' +
          // '                  }, \n' +
          // '                  { \n' +
          // '                    "className": "col-xs-4", \n' +
          // '                    "type": "blank", \n' +
          // '                    "key": "blank-1435697447499", \n' +
          // '                    "templateOptions": { \n' +
          // '                      "type": "", \n' +
          // '                      "label": "", \n' +
          // '                      "required": false, \n' +
          // '                      "placeholder": "", \n' +
          // '                      "description": "", \n' +
          // '                      "options": [] \n' +
          // '                    } \n' +
          // '                  } \n' +
          // '                ] \n' +
          // '              } \n' +
          // '            ]; \n' +


		    $scope.resultToHtml = {};
      	$scope.resultToHtml.resultStringToSave = resultStringToSave;
      	

      	$scope.getTextToCopy = function(){
      		console.info('copy all');
      		return resultStringToSave;
      	};

      	$scope.fallback = function(copy) {
      		window.prompt('Press cmd+c to copy the text below.', copy);
      	};


   


}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  module = "controllers"  for view "edit/manage forms"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.viewNameController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfWfEditController = angular.module('ngwfApp.controllers.ngwfWfEditController', []);

ngwfWfEditController.controller('ngwfWfEditController', [	'$scope', 
                                                          '$filter',
                                                          '$anchorScroll',
                            															'toaster', 
                            															'$timeout',
                                                          '$modal',
                                                          '$log', 
                                                          'formFieldManage',
                                                          'wfFormsByIdServices',
                                                          'controllerModalProxy',
                                                          
                            															function (	$scope, 
                                                                      $filter,
                                                                      $anchorScroll,
                                  																		toaster,
                                  																		$timeout, 
                                                                      $modal,
                                                                      $log, 
                                                                      formFieldManage, 
                                                                      wfFormsByIdServices, 
                                                                      controllerModalProxy
                                                                      ) {
  //verbose
  console.log('--> INIT : Hello controller  \'\'ngwfWfEditController\'\' ');


  $scope.easyFormGeneratorWbesiteVERSION = 'v1.0.0';

  
  ///////////////////////////////////////////////////
  // DEBUG model
  ///////////////////////////////////////////////////



  $scope.debug = {
                   showDebug : false,
                   configurationModelNumberofLines : 1
            };


  $scope.tab =  {
                  editTab : {active : true},
                  previewTab : {active : false},
                };


  ///////////////////////
  //formly control
  ///////////////////////

  //model filled by form :
  $scope.vm.model = {};
  //form schema : (filled from $scope.configuration in each step)
  $scope.vm.wfFormFields = [];

  $scope.vm.wfFormFieldsOnlyNeededProperties = [];  

  $scope.vm.formHtml = 
              '<form ng-submit="vm.onSubmit()" name="vm.form" novalidate> \n' +
              ' <formly-form model="vm.model" fields="vm.fields" options="vm.options" form="vm.form"> \n' +
              '   <button type="submit" class="btn btn-primary submit-button pull-right" ng-disabled="vm.form.$invalid">{{vm.submitButtonText}}</button> \n' +
              '   <button type="button" class="btn btn-default pull-right" ng-click="vm.options.resetModel()">{{vm.cancelButtonText}}</button> \n' +
              ' </formly-form> \n' +
            '</form>';

  ////////////////////////////
  //init formly control list
  ////////////////////////////

  //needed for select : list all existing forms
  $scope.loadExistingFormsList = loadExistingFormsAsList();


  function loadExistingFormsAsList(){
    //If it were not a static html, it should call server to retrieve data from database :
    // $scope.formlyList = wfFormsByIdServices.query();
    // if ($scope.debug.showDebug ===true) {
    //   console.info('---> INIT : formlyList : ');
    //   console.dir($scope.formlyList); 
    // }     
  }

  //load on init
  loadExistingFormsAsList();


  $scope.previewLoadedForm = {fieldsModel:[]};
  $scope.configurationLoaded = {};

  $scope.previewExistingform = function(formlyform){

   var configlines = JSON.parse(formlyform.formlyField);
   //here to replace with $scope.configuration : initialise configuration with lines 
   $scope.configurationLoaded = {};
   formFieldManage.bindConfigurationLines($scope.configurationLoaded,configlines);
   formFieldManage.applyConfigurationToformlyModel($scope.configurationLoaded, $scope.previewLoadedForm.fieldsModel, $scope.vm.model);

   $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);

   $scope.previewLoadedForm.cancelButtonText = formlyform.cancelButtonText;
   $scope.previewLoadedForm.submitButtonText = formlyform.submitButtonText;
  };


  $scope.vm.onSubmit = onSubmit;
  
  
  function onSubmit() {
  
       toaster.pop({
            type: 'info',
            timeout:2000,
            title: 'should save data model if it were not a static example',
            body: 'data :' + $filter('json')($scope.vm.model, 4),                
            showCloseButton: true
      }); 

    //data model in console
    console.dir($scope.vm.model);
  }


  
 //column ref                         
 $scope.numberOfColumns = 1;
 $scope.MaxNumberOfColumns = 3;
 $scope.MinNumberOfColumns = 1;


  ///////////////////////////////////////////////////
  // a column model template (to get an idea)
  ///////////////////////////////////////////////////
 //reference column object : addinding new column to configuration.line model = adding this object
 $scope.columnTemplate = {
                            numColumn: -1,
                            exist:true, 
                            control: {
                                        type:'none',
                                        key: 'none',
                                        subtype: 'none',
                                        // templateOptions: {
                                        //                     label: 'none',
                                        //                     placeholder: 'none',
                                        //                     required: false,
                                        //                     description: 'Descriptive text'
                                        //                   }
                                      }                                         
	                       };

  ///////////////////////////////////////////////////
  // a line model template (to get an idea)
  ///////////////////////////////////////////////////
 //reference line object : addinding new line to configuration model = adding this object
 $scope.lineTemplate = {
                        line:-1, 
                        activeColumn : 1,
                        columns: [
                                        {  
                                            numColumn: 1,
                                            exist:true, 
                                            control: {
                                                        type:'none',
                                                        key: 'none',
                                                        // templateOptions: {
                                                        //                     label: 'none',
                                                        //                     placeholder: 'none',
                                                        //                     required: false,
                                                        //                     description: 'Descriptive text'
                                                        //                   }
                                                      }
                                          }
                                  ]
 						};


  ///////////////////////////////////////////////////////////////////////////////////
  // configuration model (contains array of lines which contains array of columns)
  ///////////////////////////////////////////////////////////////////////////////////
  $scope.configuration = {};
  formFieldManage.initConfigurationEditFromScratch($scope.configuration);
  

  //init number of configuration lines
  $scope.resetToZeroModel = function(){
     $scope.configuration.activeLine = 1;

     if ($scope.configuration.lines.length > 1) {
        $scope.configuration.lines.splice(1, $scope.configuration.lines.length - 2);
     }
     return $scope.countConfigurationModelLines();
  };  



  ////////////////////////////////////////////////////////////
  //            line control (STEP 0)
  ////////////////////////////////////////////////////////////

  //return count configuration lines
  $scope.countConfigurationModelLines = function(){
  	//information in debug model
  	$scope.debug.configurationModelNumberofLines = $scope.configuration.lines.length;
  	return $scope.configuration.lines.length;
  };    
  //switch to line
  $scope.setActiveLineNumber = function(lineNumber){
  	if (lineNumber <= $scope.countConfigurationModelLines()) {
  		$scope.configuration.activeLine = lineNumber;
  	}
  };                
  //step next line
   $scope.goNextLineNumber = function(){
    if ($scope.configuration.activeLine !== $scope.configuration.lines.length) {
     	$scope.configuration.activeLine ++;
    }
  };  
  //step previous line
   $scope.goPreviousLineNumber = function(){
    if ($scope.configuration.activeLine !== 0) {
     	$scope.configuration.activeLine --;
    }
  }; 

  $scope.upThisLine = function(indexLine){  	
  	if (indexLine > -1) {
  			if ($scope.configuration.lines[indexLine - 1]) {
  				var currentLineObj = $scope.configuration.lines[indexLine];
  				$scope.configuration.lines.splice(indexLine , 1);
  				$scope.configuration.lines.splice((indexLine - 1), 0, currentLineObj);  	
          //manage selected aciveLine
          $scope.configuration.activeLine = 1;
  			}
  	}
      //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);     
  };


  $scope.downThisLine = function(indexLine){
  	if (indexLine > -1) {
  			if ($scope.configuration.lines[indexLine + 1]) {
  				var currentLineObj = $scope.configuration.lines[indexLine];
  				$scope.configuration.lines.splice(indexLine , 1);
  				$scope.configuration.lines.splice((indexLine + 1), 0, currentLineObj);  
          //manage selected aciveLine
          $scope.configuration.activeLine = 1;
  			}
  	}
      //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model); 

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);   
  };

//
  $scope.addNewline = function(){
  	var newNumberOfLines = $scope.configuration.lines.push(
															{
											                    line:-1, 
											                    activeColumn : 1,
											                    columns: [
											                                    {  
											                                        numColumn: 1,
											                                        exist:true, 
											                                        control: {
											                                                    type:'none',
											                                                    key: 'none',
											                                                    // templateOptions: {
											                                                    //                     label: 'none',
											                                                    //                     placeholder: 'none',
											                                                    //                     required: false,
											                                                    //                     description: 'Descriptive text'
											                                                    //                   }
											                                                  }
											                                      }
											                              ]
																}

		);
      //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields); 
  };

  //must be remove a line with index of line to delete
  $scope.removeThisLine = function(index){
  	if (index > -1) {
  		if ($scope.configuration.lines.length > 1) {
          //manage selected aciveLine
          if ($scope.configuration.activeLine === index + 1) {
            $scope.configuration.activeLine = 1;
          }
  	  		$scope.configuration.lines.splice(index, 1);
  		}else{
  	  		$timeout(function(){
  		        toaster.pop({
  		                type: 'warning',
  		                title: 'Last line' ,
  		                body: 'Can\'t delete the last line',                
  		                showCloseButton: true
  			        });
  		    }, 100); 
  		}

    //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);
  	}
  };

  ////////////////////////////////////////////////////////////
  //            columns control (STEP 1)
  ////////////////////////////////////////////////////////////

  $scope.increaseNumberOfColumns = function(){

  if ($scope.configuration.lines[$scope.configuration.activeLine -1].columns.length < $scope.MaxNumberOfColumns) {
  	var newNumberOfColumns = $scope.configuration.lines[$scope.configuration.activeLine -1].columns.push(
          																				{
          														                            numColumn: -1,
          														                            exist: true, 
          														                            control: {
          														                                        type:'none',
          														                                        key: 'none'
          														                                        // templateOptions: {
          														                                        //                     label: 'none',
          														                                        //                     placeholder: 'none',
          														                                        //                     required: false,
          														                                        //                     description: 'Descriptive text'
          														                                        //                   }
          														                                      }                                         
          																				 }																				
  																				);
  	
  	 $scope.configuration.lines[$scope.configuration.activeLine -1].columns[newNumberOfColumns - 1].numColumn = newNumberOfColumns; 
  }
     //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model); 

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);
};


  $scope.decreaseNumberOfColumns = function(indexLine, indexColumn){
  	if ($scope.configuration.lines[$scope.configuration.activeLine -1].columns.length > 1) {
  		$scope.configuration.lines[$scope.configuration.activeLine -1].columns.splice($scope.configuration.lines[$scope.configuration.activeLine -1].columns.length -1, 1);
  	}
    //re-render formfield 
    formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);  

    $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);  
  };




  ////////////////////////////////////////////////////////////
  //            components control (STEP 2)
  ////////////////////////////////////////////////////////////










  ////////////////////////////////////////////////////////////
  //             porperties control (STEP 3)
  ////////////////////////////////////////////////////////////

  $scope.saveThisForm = function(){
    // if (typeof $scope.configuration.formName === 'undefined') {
    // toaster.pop({
    //         type: 'warning',
    //         timeout:2000,
    //         title: 'Form name is undefined',
    //         body: 'Form has not been saved.',                
    //         showCloseButton: true
    //   });
    //   return false;
    // }

    // if ($scope.configuration.formName === '') {
    // toaster.pop({
    //         type: 'warning',
    //         timeout:2000,
    //         title: 'Form name is required',
    //         body: 'Form has not been saved.',                
    //         showCloseButton: true
    //   });
    //   return false;
    // }

  toaster.pop({
          type: 'wait',
          timeout:10000,
          title: 'Form is being saved',
          body: 'Wait.',                
          showCloseButton: true
    });

    var wfForm = new wfFormsByIdServices();
    var formSavingIsOK = true;

    wfForm.formName = $scope.configuration.formName;
    wfForm.submitButtonText = $scope.configuration.submitButtonText;
    wfForm.cancelButtonText = $scope.configuration.cancelButtonText;

    wfForm.formlyField = JSON.stringify($scope.configuration.lines); 

    // save to database here 
    // wfForm.$save()
    //             .then(function(res)  {    formSavingIsOK = true;    })
    //             .catch(function(req) { 
    //                                   toaster.clear();
    //                                   formSavingIsOK = false; 
    //                                   toaster.pop({
    //                                           type: 'error',
    //                                           timeout:2000,
    //                                           title: 'Error while saving form',
    //                                           body: 'Sorry, an Error occured while saving form.',                
    //                                           showCloseButton: true
    //                                     });
    //             })
    //             .finally(function()  { 
    //                                   if (formSavingIsOK === true) {
    //                                     toaster.clear();  
    //                                     toaster.pop({
    //                                             type: 'success',
    //                                             timeout:2000,
    //                                             title: 'Form is successfully saved',
    //                                             body: '',                
    //                                             showCloseButton: true
    //                                       });                                         
    //                                   }
    //              });


    showModalSaveToHtml();

    toaster.clear();  
    // toaster.pop({
    //         type: 'info',
    //         timeout:2000,
    //         title: 'Form would be saved if it were not a static example',
    //         body: '',                
    //         showCloseButton: true
    //   }); 
    return true;
  };





  ////////////////////////////////////////////////////////////
  //            step control (Step indicator)
  ////////////////////////////////////////////////////////////
  $scope.resetStepCounter = function(){
  	$scope.configuration.configStepCounter = 0;
  };

  $scope.nextConfigStep = function(){
    var configStepCounterMAX = $scope.configuration.listConfigStep.length -1;

    if ($scope.debug.showDebug) {
    	console.log('configStepCounterMAX : ' + configStepCounterMAX);
		  console.log('$scope.configuration.configStepCounter' + $scope.configuration.configStepCounter);
    }

    if ($scope.configuration.configStepCounter !== configStepCounterMAX) {
      	$scope.configuration.configStepCounter ++;
      	//debug
	    if ($scope.debug.showDebug) {
	    	console.log('not at configStepCounterMAX / increment configStepCounter to  : ' + $scope.configuration.configStepCounter);

	    }

    }    
    setTrueThisStepIndicator($scope.configuration.configStepCounter);
  };


  $scope.previousConfigStep = function(){
    var configStepCounterMIN = 0;

    if ($scope.configuration.configStepCounter !== 0) {
      $scope.configuration.configStepCounter --;
    }
    setTrueThisStepIndicator($scope.configuration.configStepCounter);
  };



  $scope.stepReachable = function(indexStep){
    if (indexStep < $scope.configuration.configStepCounter) {
      return 'disabled';
    }else{
      return 'enabled';
    }
  };

 
  function resetAllIndicators(){
    for (var i = $scope.configuration.stepIndicators.length - 1; i >= 0; i--) {
      $scope.configuration.stepIndicators[i] = false;
    }
  }
  
  function setTrueThisStepIndicator(indexIndicator){
      resetAllIndicators();
      $scope.configuration.stepIndicators[indexIndicator] = true;    
  }






  ////////////////////////////////////////////////////////////
  //            modal : add control to column
  ////////////////////////////////////////////////////////////

  $scope.nyaSelect = {};
  controllerModalProxy.initNyaSelect($scope.nyaSelect);

  $scope.animationsEnabled = true;

  $scope.showModalAddCtrlToColumn = function (size, indexLine, numcolumn) {

    var modalInstance = $modal.open({
                                      animation: $scope.animationsEnabled,
                                      templateUrl: 'modalWfEdit.html', 
                                      controller: 'ngwfWfEditMODALController',
                                      size: 'lg',
                                      resolve: {
                                        nyaSelect: function () {
                                          return controllerModalProxy.getNyASelectFromSelectedLineColumn($scope.nyaSelect, $scope.configuration,indexLine, numcolumn);
                                        }
                                      }
    });


    modalInstance.result.then(function (modalAddCtrlModel) {
        controllerModalProxy.bindConfigurationModelFromModalReturn(indexLine, numcolumn, modalAddCtrlModel, $scope.configuration);
        formFieldManage.applyConfigurationToformlyModel($scope.configuration, $scope.vm.wfFormFields, $scope.vm.model);
        
        $scope.vm.wfFormFieldsOnlyNeededProperties = angular.copy($scope.vm.wfFormFields);
    }, function () {
      $log.info('Modal dismissed at: ' + new Date());
    });
  };




  $scope.toggleAnimation = function () {
    $scope.animationsEnabled = !$scope.animationsEnabled;
  };                            



  //////////////////////////////////////////////////////////////////////////
  //  Specific website  —  modal : save result to HTML (copy to clipboard)
  //////////////////////////////////////////////////////////////////////////

  $scope.resultToSave = {
    fieldsModel : [],
    dataModel : {},
    submitBtnText : 'Submit',
    cancelBtnText : 'Cancel'

  };
  


  function showModalSaveToHtml(size, indexLine, numcolumn) {

    var modalInstance = $modal.open({
                                      animation: $scope.animationsEnabled,
                                      templateUrl: 'modalSaveResult2Html.html', 
                                      controller: 'modalSaveResult2Html',
                                      size: 'lg',
                                      resolve: {
                                        resultToSave: function () {
                                          bindObjectToHtml();
                                          return $scope.resultToSave;
                                        }
                                      }
    });


    modalInstance.result.then(function () {
        
    }, function () {
      $log.info('Modal dismissed at: ' + new Date());
    });
  }

  function bindObjectToHtml(){
    $scope.resultToSave.fieldsModel = angular.copy($scope.vm.wfFormFieldsOnlyNeededProperties); 
    $scope.resultToSave.dataModel = angular.copy($scope.vm.model); 
    $scope.resultToSave.submitBtnText = $scope.configuration.submitButtonText;
    $scope.resultToSave.cancelBtnText = $scope.configuration.cancelButtonText;
  }


}]);

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  module = "controllers"  for view "wfEdit"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.controllers.viewNameController" = controller module
//
//  This module is a view controller -> it must be injected in controller container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfWfEditMODALController = angular.module('ngwfApp.controllers.ngwfWfEditMODALController', []);

ngwfWfEditMODALController.controller('ngwfWfEditMODALController', [	'$scope', 
                                                                    '$modalInstance',
                                      															'nyaSelect',
                                                                    'toaster' ,
                                                                    '$timeout',
                                                                    'selectOptionManage',
                                                                    'controllerModalProxy',
                                      															function (	$scope, 
                                                                                $modalInstance, 
                                                                                nyaSelect, 
                                                                                toaster,
                                                                                $timeout,
                                                                                selectOptionManage,
                                                                                controllerModalProxy
                                                                              ){
  //verbose
  console.log('--> INIT : Hello controller  \'\'ngwfWfEditMODALController\'\' ');
  


var initOptionModel = {rows:[
                            ]
                  };

  ////////////////////////////////////////////
  // part : radio
  ///////////////////////////////////////////

  $scope.radioRowCollection = initOptionModel;
  $scope.newOptionRadio = {saisie: ""};


  function bindRadioFromNYA(){
    if ($scope.nyaSelect.temporyConfig.formlyOptions.length > 0) {
      for (var i = 0; i <= $scope.nyaSelect.temporyConfig.formlyOptions.length-1; i++){

            var newOption = {"option": $scope.nyaSelect.temporyConfig.formlyOptions[i].name,
                      "order": i,
                      "group": ""
                    };
            $scope.radioRowCollection.rows.push(newOption);
      }    
    }
  }

  function bindRadioToNya(){
    var resetNyASelectOptions = [];
    $scope.nyaSelect.temporyConfig.formlyOptions = resetNyASelectOptions;

    if ($scope.radioRowCollection.rows.length > 0) {

      for (var i = 0; i <= $scope.radioRowCollection.rows.length - 1; i++){
            var newOption = {"name": $scope.radioRowCollection.rows[i].option,
                      "value": i,
                      "group": ""
                    };
            $scope.nyaSelect.temporyConfig.formlyOptions.push(newOption);   
        }       
   }
  }

  $scope.addNewOptionRadio = function(){
    var result = selectOptionManage.addNewOptionRadio($scope.radioRowCollection, $scope.newOptionRadio.saisie);
    if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: '\''+ $scope.newOptionRadio.saisie + '\'' + ' cannot be added.',                
                  showCloseButton: true
            });
    }
    //reset input
    $scope.newOptionRadio = {saisie: ""};
  };

  $scope.removeRadioRow = function(index) {
      var result = selectOptionManage.removeOption($scope.radioRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Delete was cancelled.',                
                  showCloseButton: true
            });
      }      
    }; 

  $scope.upThisRadioRow = function(index){
      var result = selectOptionManage.upthisOption($scope.radioRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }       
  };                                    

  $scope.downThisRadioRow = function(index){
      var result = selectOptionManage.downthisOption($scope.radioRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }
  };



  ////////////////////////////////////////////
  // part : basic Select
  ///////////////////////////////////////////

  $scope.basicSelectRowCollection = initOptionModel;
  $scope.newOptionBasicSelect = {saisie: ""};


  function bindBasicSelectFromNYA(){
    // console.info('bindBasicSelectFromNYA');
    // console.dir($scope.nyaSelect.temporyConfig);

    if ($scope.nyaSelect.temporyConfig.formlyOptions.length > 0) {
      for (var i = 0; i <= $scope.nyaSelect.temporyConfig.formlyOptions.length-1; i++){

            var newOption = {"option": $scope.nyaSelect.temporyConfig.formlyOptions[i].name,
                      "order": i,
                      "group": ""
                    };
            $scope.basicSelectRowCollection.rows.push(newOption);
      }    
    }
  }

  function bindBasicSelectToNya(){
    var resetNyASelectOptions = [];
    $scope.nyaSelect.temporyConfig.formlyOptions = resetNyASelectOptions;
    if ($scope.basicSelectRowCollection.rows.length > 0) {
      for (var i = 0; i <= $scope.basicSelectRowCollection.rows.length - 1; i++){
            var newOption = {"name": $scope.basicSelectRowCollection.rows[i].option,
                      "value": i,
                      "group": ""
                    };
            $scope.nyaSelect.temporyConfig.formlyOptions.push(newOption);
        }      
   }
  }

  $scope.addNewOptionBasicSelect = function(){
    var result = selectOptionManage.addNewOptionBasicSelect($scope.basicSelectRowCollection, $scope.newOptionBasicSelect.saisie);
    if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: '\''+ $scope.newOptionBasicSelect.saisie + '\'' + ' cannot be added.',                
                  showCloseButton: true
            });
    }
    //reset input
    $scope.newOptionBasicSelect = {saisie: ""};
  };

  $scope.removeRow = function(index) {
      var result = selectOptionManage.removeOption($scope.basicSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Delete was cancelled.',                
                  showCloseButton: true
            });
      }      
    }; 

  $scope.upThisRow = function(index){
      var result = selectOptionManage.upthisOption($scope.basicSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }       
  };                                    

  $scope.downThisRow = function(index){
      var result = selectOptionManage.downthisOption($scope.basicSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      }
  };


  ////////////////////////////////////////////
  // part : grouped Select
  ///////////////////////////////////////////

  $scope.groupedSelectRowCollection = initOptionModel;
  $scope.newOptionGroupedSelect = {saisie: ""};

  $scope.GroupedSelectGroups =    {
                                    list:[]
                                  };
  $scope.newGroupGroupedSelect = {saisie: ""};  
  $scope.groupSelectGroupClick = {showList : false};                                


  function bindGroupedSelectFromNYA(){
    if ($scope.nyaSelect.temporyConfig.formlyOptions.length > 0) {
      for (var i = 0; i <= $scope.nyaSelect.temporyConfig.formlyOptions.length-1; i++){
      //for (var i = $scope.nyaSelect.temporyConfig.formlyOptions.length - 1; i >= 0; i--) {

            var newOption = {"option": $scope.nyaSelect.temporyConfig.formlyOptions[i].name,
                      "order": i,
                      "group": $scope.nyaSelect.temporyConfig.formlyOptions[i].group
                    };
            $scope.groupedSelectRowCollection.rows.push(newOption);            
        }
        //grouplist : thx to lodash it is easy
        var filteredgroup = _.uniq(_.pluck($scope.groupedSelectRowCollection.rows, 'group'));
       angular.copy(filteredgroup, $scope.GroupedSelectGroups.list); 
       //console.dir($scope.GroupedSelectGroups.list);

    }
  }

  function bindGroupedSelectToNya(){
    $scope.nyaSelect.temporyConfig.formlyOptions = [];
    for (var i = 0; i <= $scope.groupedSelectRowCollection.rows.length - 1; i++){
          var newOption = {"name": $scope.groupedSelectRowCollection.rows[i].option,
                    "value": i,
                    "group": $scope.groupedSelectRowCollection.rows[i].group
                  };

          $scope.nyaSelect.temporyConfig.formlyOptions.push(newOption);
          
      }
      ///console.log('\n\n\n\n\n');
      //console.dir($scope.nyaSelect.temporyConfig.formlyOptions);
  }  

  $scope.showGroupListToChoose = function(){
    $scope.groupSelectGroupClick.showList = !$scope.groupSelectGroupClick.showList;
  };

  $scope.addNewGroupToGroupedSelect = function(){
    if ($scope.newGroupGroupedSelect.saisie !== "") {
      for (var i = $scope.GroupedSelectGroups.list.length - 1; i >= 0; i--) {
        if ($scope.GroupedSelectGroups.list[i] === $scope.newGroupGroupedSelect.saisie) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: 'Group already exists',
                  body: 'No group added.',                
                  showCloseButton: true
            });          
        }
        
      }
      $scope.GroupedSelectGroups.list.push($scope.newGroupGroupedSelect.saisie);

    }else{
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: 'Not a valid group to add',
                  body: 'No group added.',                
                  showCloseButton: true
            });

    }
    $scope.newGroupGroupedSelect.saisie = "";
  };


  $scope.addNewOptionGroupedSelect = function(){
    var result = selectOptionManage.addNewOptionGroupedSelect($scope.groupedSelectRowCollection, $scope.newOptionGroupedSelect.saisie, '');
    if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: '\''+ $scope.newOptionGroupedSelect.saisie + '\'' + ' cannot be added.',                
                  showCloseButton: true
            });
    }
    //bind nya : dont bind here $apply is not done fast enough
    //bindGroupedSelectToNya();
    //reset input
    $scope.newOptionGroupedSelect = {saisie: ""};
  };

  $scope.removeGroupedSelectRow = function(index) {
      var result = selectOptionManage.removeOption($scope.groupedSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Delete was cancelled.',                
                  showCloseButton: true
            });
      }   
    }; 

  $scope.upThisGroupedSelectRow = function(index){
      var result = selectOptionManage.upthisOption($scope.groupedSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      } 
  };                                    

  $scope.downThisGroupedSelectRow = function(index){
      var result = selectOptionManage.downthisOption($scope.groupedSelectRowCollection, index);
      if (result.resultFlag === false) {
          toaster.pop({
                  type: 'warning',
                  timeout:2000,
                  title: result.details,
                  body: 'Operation cancelled.',                
                  showCloseButton: true
            });
      } 

  };


  /////////////////////////////////////////////
  // init datetimepicker model
  /////////////////////////////////////////////
  $scope.demodt ={};

  $scope.today = function() {
    $scope.demodt.dt = new Date();
  };
  $scope.today();

  $scope.clear = function () {
    $scope.demodt.dt = null;
  };


  $scope.open = function($event) {
    $event.preventDefault();
    $event.stopPropagation();

    $scope.demodt.opened = true;
  };

  $scope.dateOptions = {
           formatYear: 'yy',
           startingDay: 1,
           showWeeks: true,
           initDate: null
  };

  $scope.demodt.formats = ['dd-MMMM-yyyy', 'yyyy/MM/dd', 'dd.MM.yyyy', 'shortDate'];
  
  function initDatePicker(){
    $scope.nyaSelect.temporyConfig.datepickerPopup = $scope.demodt.formats[0];  
  }
  


  /////////////////////////////////////////////
  // init model from controller data
  /////////////////////////////////////////////
  $scope.nyaSelect = nyaSelect ;

  //console.dir($scope.nyaSelect);
  
  //selected control from  main controller applied to current selected control
  $scope.nyaSelect.selectedControl = $scope.nyaSelect.temporyConfig.selectedControl;


  //place nya-select to selection if not none :
   if (nyaSelect.selectedControl !== 'none') {
    for (var i = $scope.nyaSelect.controls.length - 1; i >= 0; i--) {
       if ($scope.nyaSelect.controls[i].id === nyaSelect.selectedControl) {
          //$scope.nyaSelect.selectedControl = nyaSelect.controls[i].id;
          $scope.modelNyaSelect = nyaSelect.controls[i];
       }
    }

    if ($scope.nyaSelect.selectedControl === "BasicSelect") {
      bindBasicSelectFromNYA();
    }

    if ($scope.nyaSelect.selectedControl === "GroupedSelect") {
      bindGroupedSelectFromNYA();
    } 

    if ($scope.nyaSelect.selectedControl === "Radio") {
      bindRadioFromNYA();
    }    

  }



  function resetTemporyConfig(){
    $scope.nyaSelect.temporyConfig = {
                                        formlyLabel: "", 
                                        formlyRequired: false, 
                                        formlyPlaceholder: "",
                                        formlyDesciption: "",
                                        formlyOptions: []
                                      };   
  }



  $scope.selectThisControl = function(controlName){
    $scope.nyaSelect.selectedControl = 'none';
    resetTemporyConfig();

    for (var i = $scope.nyaSelect.controls.length - 1; i >= 0; i--) {
       if ($scope.nyaSelect.controls[i].id === controlName) {
          $scope.nyaSelect.selectedControl = $scope.nyaSelect.controls[i].id;         
       }
    }

    if ($scope.nyaSelect.selectedControl === 'Date') {
      initDatePicker();
    }
  };



  /////////////////////////
  // modal buttons click
  /////////////////////////
  $scope.ok = function () {

    if ($scope.nyaSelect.selectedControl === "BasicSelect") {
      bindBasicSelectToNya();
    }

    if ($scope.nyaSelect.selectedControl === "GroupedSelect") {
      bindGroupedSelectToNya();
    }  

    if ($scope.nyaSelect.selectedControl === "Radio") {
      bindRadioToNya();
    }  

    //save config to control
    controllerModalProxy.applyConfigToSelectedControl($scope.nyaSelect);
    //return current model to parent controller :
    $modalInstance.close($scope.nyaSelect);

  };

  $scope.cancel = function () {
    $modalInstance.dismiss('cancel');
  };


}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "directives" container
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.directives" = container directives module
//
//  This module is a container -> it must be injected in the application -> so it will inject all directives injected here
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular.module('ngwfApp.directives', [	'ngwfApp.directives.ngwfStRationDirective',
										'ngwfApp.directives.ngwfScrollCssDirective',
										'ngwfApp.directives.scroll-animate-directive',
										function () {
    //verbose
    console.log('--> INIT : Hello directives container  \'\'ngwfApp.directives\'\' ');
}]);

// from https://github.com/caioiglesias/scroll-animate-directive
// example : http://plnkr.co/edit/CXMXsuulxFxYElZUZBoT?p=preview

angular.module('ngwfApp.directives.scroll-animate-directive', [])
    .controller('aniDistances', ['$scope',
        function($scope) {
            $scope.getScrollOffsets = function(w) {

                // Use the specified window or the current window if no argument 
                w = w || window;

                // This works for all browsers except IE versions 8 and before
                if (w.pageXOffset !== null) {
                    return {
                        x: w.pageXOffset,
                        y: w.pageYOffset
                    };
                }

                // For IE (or any browser) in Standards mode
                var d = w.document;
                if (document.compatMode === 'CSS1Compat') {
                    return {
                        x: d.documentElement.scrollLeft,
                        y: d.documentElement.scrollTop
                    };
                }

                // For browsers in Quirks mode
                return {
                    x: d.body.scrollLeft,
                    y: d.body.scrollTop
                };
            };
            $scope.getPosition = function(e) {
                return {
                    x: e[0].offsetLeft,
                    y: e[0].offsetTop
                };
            };
            $scope.getViewPortSize = function(w) {

                return {
                    x: Math.max(document.documentElement.clientWidth, w.innerWidth || 0),
                    y: Math.max(document.documentElement.clientHeight, w.innerHeight || 0)
                };


            };
        }
    ])
    .directive('aniScroll', function($window) {
        return {
            restrict: 'A',
            controller: 'aniDistances',
            transclude: true,
            replace: true,
            template: '<div ng-transclude ng-show=\'show\'></div>',
            scope: {
                show: '@',
            },
            link: function(scope, element, attrs) {

                angular.element($window).bind('scroll', function() {
                    var targetOffset = attrs.aniScroll;
                    var offset = scope.getScrollOffsets($window);
                    if (offset.y >= targetOffset) {
                        scope.show = true;
                    } else {
                        scope.show = false;
                    }
                    scope.$apply();
                });
            }
        };
    })
    .directive('aniView', function($window) {
        return {
            restrict: 'A',
            controller: 'aniDistances',
            transclude: true,
            replace: true,
            template: '<div ng-transclude ng-show=\'show\'></div>',
            scope: {
                show: '@',
            },
            link: function(scope, element, attrs) {

                angular.element($window).bind('scroll', function() {
                    var position = scope.getPosition(element);
                    var offset = scope.getScrollOffsets($window);
                    var viewport = scope.getViewPortSize($window);
                    var coverage = {
                        x: parseInt(viewport.x + offset.x),
                        y: parseInt(viewport.y + offset.y)
                    };
                    if (coverage.y >= position.y && coverage.x >= position.x) {
                        scope.show = true;
                    } else {
                        scope.show = false;
                    }
                    scope.$apply();
                });
            }
        };
    });
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "directive" 
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.directives.directiveNAME" = container directives module
//
//  This module is a directive -> it must be injected in directives container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfScrollCssDirective = angular.module('ngwfApp.directives.ngwfScrollCssDirective', []);


//this directive  is fast dev for navigation bar
//if you need you should add attr for height rather fix value (680)
ngwfScrollCssDirective.directive('scrollChangeCss',[function(){

	console.log('--> INIT : Hello directive  \'\'scrollCss\'\' ');

     return{

     	link: function(scope, element, attrs) {


		    $(window).bind('scroll', function() {

		    	var windowHeight = $(window).height();
		    	//////////////////////////////////////
		    	//navigation bar css change on scroll
		    	//////////////////////////////////////
		        var navHeight = $(window).height() - 585;
		        if ($(window).scrollTop() > navHeight) {
		  			scope.scrollflag.boolNavBarChangeClass = true;
			       	//console.log('Scrolled below header.'); 
		        } else {
			        scope.scrollflag.boolNavBarChangeClass = false;
			        //console.log('Header is in view.');            
		        }

		    	//////////////////////////////////////////////////
		    	//bottom button appear on scroll (to go back top)
		    	//////////////////////////////////////////////////
		        var navHeightForBottomButton = windowHeight - 300;
		        console.info('navHeightForBottomButton = ' + navHeightForBottomButton);
		        console.info('-> $(window).scrollTop()= ' + $(window).scrollTop() );

		        if ($(window).scrollTop() > navHeightForBottomButton) {
		  			scope.scrollflag.boolBottomButtonChangeClass = true;

		        } else {
			        scope.scrollflag.boolBottomButtonChangeClass = false;
		        }


		        //never forget scope.$apply or you will regret^^
		        scope.$apply();
		    });

    	}
   }; 





}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "directive" 
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.directives.directiveNAME" = container directives module
//
//  This module is a directive -> it must be injected in directives container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfStRatioDirective = angular.module('ngwfApp.directives.ngwfStRationDirective', []);


//this directive is attribute only : add "st-ration = "__A NUMBER__" in view or html :
ngwfStRatioDirective.directive('stRatio',[function(){

	console.log('--> INIT : Hello directive  \'\'stRatio\'\' ');

        return {

          link:function(scope, element, attr){
            var ratio=+(attr.stRatio);
            
            element.css('width',ratio+'%');
            
          }
        };
}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TEMPLATE FILTER 
//
//  module = "filter" 
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.filters.filterNAME" = container filters module
//
//  This module is a filter -> it must be injected in filters container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var  filterTemplate = angular.module('ngwfApp.filters.serviceTemplate', []);

filterTemplate.controller('filterTemplate', function ($scope) {
    //verbose
    console.log('--> INIT : Hello filter  \'\'ngwfApp.filters.filterTemplate\'\' ');
});
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "filters" container
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.filters" = container filters module
//
//  This module is a container -> it must be injected in the application -> so it will inject all filters injected here
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular.module('ngwfApp.filters', ['ngwfApp.filters.serviceTemplate'], 
									function () {
    //verbose
    console.log('--> INIT : Hello filters container  \'\'ngwfApp.filters\'\' ');
});

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  - edit control -
//	controller modal proxy 
//
//
// NOTE : adding new custom control (template) -> update this service (at least function resetNyaSelect(nyaSelectObj))
//
//  module = "service" 
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.services.serviceNAME" = container services module
//
//  This module is a service -> it must be injected in services container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfEditCtrlControllerModalProxy = angular.module('ngwfApp.services.ngwfEditCtrlControllerModalProxy', []);


ngwfEditCtrlControllerModalProxy.factory('controllerModalProxy', [function(){

   console.log('--> INIT : Hello service  \'\'controllerModalProxy\'\' ');

   	/////////////////////////////////////////
	// proxy services
	/////////////////////////////////////////
    return {
    			initNyaSelect : function(nyaSelectObj){
    				return resetNyaSelect(nyaSelectObj);
    			},

				getNyASelectFromSelectedLineColumn: function(nyaSelectObj, configurationObj, indexLine, numcolumn){
				      resetNyaSelect(nyaSelectObj);
				      
				      //data send to modal controller                                          
				      if (typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions != 'undefined') {

				        nyaSelectObj.temporyConfig.selectedControl = typeof configurationObj.lines[indexLine].columns[numcolumn].control.selectedControl != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.selectedControl : "none";
				        nyaSelectObj.temporyConfig.formlyLabel = typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.label != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.label : "";
				        nyaSelectObj.temporyConfig.formlyRequired = typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.required != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.required : "";
				        nyaSelectObj.temporyConfig.formlyDesciption = typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.description != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.description : "";
				        nyaSelectObj.temporyConfig.formlyPlaceholder = typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.placeholder != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.placeholder : "";
				        nyaSelectObj.temporyConfig.formlyOptions = typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.options != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.options : "";
				        //particular case : datepicker
				        if (nyaSelectObj.temporyConfig.selectedControl === 'Date') {
				        	nyaSelectObj.temporyConfig.datepickerPopup = typeof configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.datepickerPopup != 'undefined' ? configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.datepickerPopup : "";

				        	console.warn('getNyASelectFromSelectedLineColumn : datepickerPopup= ' + nyaSelectObj.temporyConfig.datepickerPopup);     	
				        }
				      }
				      return nyaSelectObj;
				  },

				  bindConfigurationModelFromModalReturn: function(indexLine, numcolumn, modalAddCtrlModel, configurationObj){
				      
				      var extractedProps = returnControlFromAddCtrlModalModel(modalAddCtrlModel);
				      configurationObj.lines[indexLine].columns[numcolumn].control.selectedControl = extractedProps.selectedControl;
				      configurationObj.lines[indexLine].columns[numcolumn].control.type = extractedProps.formlyType;
				      configurationObj.lines[indexLine].columns[numcolumn].control.subtype = extractedProps.formlySubtype;
				      //reset templateOptions
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions = {
				                                                                                            label: "",
				                                                                                            required: false,
				                                                                                            description: "",
				                                                                                            placeholder: "",
				                                                                                            options: []
				                                                                                          };
				       //then bind templateOptions                                                                                   
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.label = extractedProps.formlyLabel;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.required = extractedProps.formlyRequired;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.description = extractedProps.formlyDesciption;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.placeholder = extractedProps.formlyPlaceholder;
				      configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.options = extractedProps.formlyOptions;

					  //////////////////////////////////////////
				      // add additionnal particular properties
				      //////////////////////////////////////////
				      //-> datepicker : datepickerPopup
				      if (configurationObj.lines[indexLine].columns[numcolumn].control.type === 'datepicker') {
				       	configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.datepickerPopup = extractedProps.datepickerPopup;

				       	console.warn('bindConfigurationModelFromModalReturn : datepickerPopup= ' + configurationObj.lines[indexLine].columns[numcolumn].control.templateOptions.datepickerPopup);     	
				      }	

				    
				      
				      //unique key (set only first time) in this model is formly control type + Date.now(); 
				        var newKey = configurationObj.lines[indexLine].columns[numcolumn].control.type + '-' + Date.now();

				        if (validKeyUniqueness(newKey, configurationObj) === true){
				          //console.info('1st attempt : new Key is unique');
				          configurationObj.lines[indexLine].columns[numcolumn].control.key = newKey;
				        }else{
				          //console.warn('1st attempt : new Key is not unique');
				          //2nd attempt
				          newKey = configurationObj.lines[indexLine].columns[numcolumn].control.type + '-' + Date.now();

				          if (validKeyUniqueness(newKey, configurationObj) === true){
				            //console.info('2nd attempt : new Key is unique');
				            configurationObj.lines[indexLine].columns[numcolumn].control.key = newKey;
				          }else{
				            //console.warn('2nd attempt : new Key is not unique');
				            //2nd attempt
				            newKey = configurationObj.lines[indexLine].columns[numcolumn].control.type + '-' + Date.now();
				          }
				        }                                                                     

				      configurationObj.lines[indexLine].columns[numcolumn].control.edited = true;

				      
				  },


				  applyConfigToSelectedControl: function(nyaSelectObj){
				  	//used in modal (edit control)
				    for (var i = nyaSelectObj.controls.length - 1; i >= 0; i--) {
				      if (nyaSelectObj.controls[i].id === nyaSelectObj.selectedControl) {

				          nyaSelectObj.controls[i].formlyLabel = nyaSelectObj.temporyConfig.formlyLabel;
				          nyaSelectObj.controls[i].formlyRequired = nyaSelectObj.temporyConfig.formlyRequired;
				          nyaSelectObj.controls[i].formlyDesciption = nyaSelectObj.temporyConfig.formlyDesciption;
				          nyaSelectObj.controls[i].formlyPlaceholder = nyaSelectObj.temporyConfig.formlyPlaceholder;
				          nyaSelectObj.controls[i].formlyOptions = nyaSelectObj.temporyConfig.formlyOptions;

				          if (nyaSelectObj.controls[i].id ==='Date' ) {
				          	nyaSelectObj.controls[i].datepickerPopup = nyaSelectObj.temporyConfig.datepickerPopup;

				          	console.warn('applyConfigToSelectedControl : datepickerPopup= ' + nyaSelectObj.controls[i].datepickerPopup);     	
				          }
				        
				       }
				    }
				  }




    		};

	/////////////////////////////////////////
	// functions
	/////////////////////////////////////////    		

  //init object : return true (if not true, you may have problem^^)
  function resetNyaSelect(nyaSelectObj){
    var newNyaSelectObj = {

                    controls : [
                                {id: 'empty',  name: 'no control', subtitle: 'no control', group: 'Blank', formlyType: "blank", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'Header',  name: 'Header', subtitle: 'no control', group: 'Decoration', formlyType: "header", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'Subtitle',  name: 'Subtitle', subtitle: 'no control', group: 'Decoration', formlyType: "subTitle", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'TextInput',  name: 'Text input', subtitle: 'Text input', group: 'input', formlyType: "input", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'Password',  name: 'Password', subtitle: 'Password', group: 'input', formlyType: "input", formlySubtype: "password", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                //{id: 'Date',  name: 'Date', subtitle: 'Date', group: 'input', formlyType: "input", formlySubtype: "date", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'Date',  name: 'Date', subtitle: 'Date', group: 'input', formlyType: "datepicker", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: [], datepickerPopup: "dd-MMMM-yyyy"},
                                {id: 'Texarea', name: 'Textarea', subtitle: 'Textarea', group: 'Textarea', formlyType: "textarea", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'RichTextEditor', name: 'RichTextEditor', subtitle: 'RichTextEditor', group: 'Textarea', formlyType: "richEditor", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'Radio', name: 'Radio', subtitle: 'Radio', options: [], group: 'Radio', formlyType: "radio", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "" , formlyOptions: []},
                                {id: 'Checkbox', name: 'Checkbox', subtitle: 'Checkbox', group: 'Checkbox', formlyType: "checkbox", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'BasicSelect', name: 'Basic select', subtitle: 'Basic select',options: [], group: 'Select', formlyType: "basicSelect", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "", formlyOptions: []},
                                {id: 'GroupedSelect', name: 'Grouped Select', subtitle: 'Grouped Select',options: [], group: 'Select', formlyType: "groupedSelect", formlySubtype: "", formlyLabel: "", formlyRequired: false, formlyDesciption: "",formlyOptions: []}
                              ],

                      selectedControl : 'none' ,
                      temporyConfig : {
                                        selectedControl: "none",
                                        formlyLabel: "label", 
                                        formlyRequired: false, 
                                        formlyDesciption: "",
                                        formlyPlaceholder: "",
                                        formlyOptions : []
                                      } 

    };

    //reset
  	angular.copy(newNyaSelectObj, nyaSelectObj);
    return true;
  }




  
  function returnControlFromAddCtrlModalModel(CtrlModalModel){

    var modelToReturn = {
          selectedControl:"none",
          formlyType : "none",
          formlySubtype: "none",
          formlyLabel: "",
          formlyRequired : false,
          formlyDesciption: "",
          formlyPlaceholder: "",
          formlyOptions: []
    };

    for (var i = CtrlModalModel.controls.length - 1; i >= 0; i--) {
      if (CtrlModalModel.selectedControl === CtrlModalModel.controls[i].id) {
        modelToReturn.selectedControl = CtrlModalModel.selectedControl;
        modelToReturn.formlyType = CtrlModalModel.controls[i].formlyType;
        modelToReturn.formlySubtype = CtrlModalModel.controls[i].formlySubtype;
        modelToReturn.formlyLabel = CtrlModalModel.controls[i].formlyLabel;
        modelToReturn.formlyRequired = CtrlModalModel.controls[i].formlyRequired;
        modelToReturn.formlyDesciption = CtrlModalModel.controls[i].formlyDesciption;
        modelToReturn.formlyPlaceholder = CtrlModalModel.controls[i].formlyPlaceholder;
        modelToReturn.formlyOptions = CtrlModalModel.controls[i].formlyOptions;

        //particular properties 
        //datetpicker format
        if (CtrlModalModel.controls[i].formlyType === 'datepicker') {
			modelToReturn.datepickerPopup = CtrlModalModel.controls[i].datepickerPopup;   
			console.warn('returnControlFromAddCtrlModalModel : datepickerPopup= ' + modelToReturn.datepickerPopup);     	
        }
      }
    }
    return modelToReturn;
  }

  
  function validKeyUniqueness(thisKey, configurationObj){
    var isUnique = true;
    //each lines
    for (var i = configurationObj.lines.length - 1; i >= 0; i--) {
      //each columns
      for (var j = configurationObj.lines[i].columns.length - 1; j >= 0; j--) {
        if (configurationObj.lines[i].columns[j].control.key === thisKey) {
          isUnique = false;
        }
          
      }
      
    }

    return isUnique;  
  }  

  }]);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  MOST IMPORTANT service (ok... It is a factory...^^)
//////////////////////////////////////////////////////////
//
//
//  module = "service"  formly management
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.services.serviceNAME" = container services module
//
//  This module is a service -> it must be injected in services container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


//---------------------------
// Wait, what does it mean?
//---------------------------
//
//  This service is intended to make your coding easier when you want to develop your own form generator using angular formly
//  before going on, be sure to be a minimum comfortable with "angular formly": http://angular-formly.com
//
//
//PRINCIPLE : this service will help you to manage these 2 models and you'll be able to manage dynamic form with advanced layout (1 to 3 columns)
//-----------------------------------------------------------------------------------------------------------------------------------------------
//  - "formlyModel" is the model exposed to view or html "fields model" (= an array of objects)
//    This model is the one you can see in all well documented examples here : http://angular-formly.com
//    -> in your view or html : <formly-form model="dataModel" fields="formlyModel">
//
//  - "configurationModel" is the model on which editing a form will work
//    before applying results to "formlyModel"
//
//
// NOTE : if you save a form to database, you will save "configurationModel" rather than "formlyModel".
//        Why? : 
//              since as you plan to create a form generator you can't create a finite model
//              since you may want to be able to save the generated form even if it is not a finite model
//              since "formlyModel" objects will be populated with a lot of properties you don't need to store contrary to "configurationModel" which contains only what you need
//              since "formlyModel" can't be JSON.stringify when you want to use advanced layout (1 column/2/3 columns template?)
//              since it is better approach to use a backgroundModel (async operation ...) that is bind to presentation model only when it is fully ready or filled.
//
//
//NOTE : if you want to manage more columns templates (right now only manage up to 3 columns), just inspire from existing code


var formFieldManage = angular.module('ngwfApp.services.formFieldManage', []);


formFieldManage.factory('formFieldManage', [ function(){


	console.log('--> INIT : Hello service  \'\'formFieldManage\'\' ');

              //configuration model will contain 1 line, since :
              //   - it is non sense to create a form without a single line (no line = no form at all)
              //   -> so it is non sense to force user to add a first line
              //
              // PLEASE NOTE columns array contains objects that look like formly fields one

    return {

            initConfigurationEditFromScratch: function(configurationModel){
              var configurationModelInit = {

                                        activeLine: 1,   

                                        listConfigStep: [
                                                        'init',
                                                        'first',
                                                        'second',
                                                        'third'
                                                      ],
                                                      
                                        stepIndicators:  [
                                                                true,
                                                                false,
                                                                false,
                                                                false
                                                          ], 
                                        configStepCounter: 0, 
                                        submitButtonText : "submit",
                                        cancelButtonText: "cancel",

                                        lines: [
                                                {
                                                    line:1,                                       
                                                    activeColumn : 1,
                                                    columns: [
                                                                    {  
                                                                        numColumn: 1,
                                                                        exist:true, 
                                                                        control: {
                                                                                    type:'none',
                                                                                    key: 'none',
                                                                                    // templateOptions: {
                                                                                    //                     label: 'none',
                                                                                    //                     placeholder: 'none',
                                                                                    //                     required: false,
                                                                                    //                     description: 'Descriptive text'
                                                                                    //                   }
                                                                                  }
                                                                      }
                                                              ]
                                                 }                                 
                                            ]


                                      };
              angular.copy(configurationModelInit, configurationModel);                   
            },


            bindConfigurationLines: function(configurationModel, lines){
              
              if( Object.prototype.toString.call(lines) === '[object Array]' ) {
                var configurationModelResult = {
                                          activeLine: 1,   
                                          listConfigStep: [
                                                          'init',
                                                          'first',
                                                          'second',
                                                          'third'
                                                        ],
                                          stepIndicators:  [
                                                                  true,
                                                                  false,
                                                                  false,
                                                                  false
                                                            ], 
                                          configStepCounter: 0, 
                                          submitButtonText : "submit",
                                          cancelButtonText: "cancel",
                                          lines: []
                                        };
                configurationModelResult.lines = [].concat(lines);  
                angular.copy(configurationModelResult, configurationModel);                                         

                return getMessageObject('configuration model is bound','lines are bound to configuration model.');
              }else{
                return getErrorObject('lines is not an array', 'Checks lines type, it is not an array.');
              }
            },

            applyConfigurationToformlyModel:function(configurationModel, formlyModel, formlyDataModel){
              resetFormlyModel(formlyModel);
              //since 1.0.2 : reset data model
              resetDataModel(formlyDataModel);

              //manage header here line0
              var lineNumber = configurationModel.lines.length;
              for (var i = 0; i < lineNumber; i++) {

                  //1 column line control
                  if (configurationModel.lines[i].columns.length === 1) {
                    //test if template control = header
                    if (configurationModel.lines[i].columns[0].control.type === "header") {
                      AddOneColumnHeader(formlyModel, configurationModel, i);
                    }else{
                      AddOneColumnControl(formlyModel, configurationModel, i);  
                    }          
                  }

                  if (configurationModel.lines[i].columns.length === 2) {
                    AddTwoColumnControl(formlyModel, configurationModel,i);
                  }

                  if (configurationModel.lines[i].columns.length === 3) {
                    AddThreeColumnControl(formlyModel, configurationModel,i);
                  }

                  console.info('applyConfigurationToformlyModel : formlyModelis after bind =');
                  console.dir(formlyModel);
              }
            }
        };



/////////////////////////////////////////
// formly model functions
/////////////////////////////////////////
function resetFormlyModel(formlyModel){
  var resetformly = [];
  //angular.copy -> good way to reset
  angular.copy(resetformly, formlyModel);
}

function AddOneColumnHeader(formlyModel, configurationModel,lineIndex){
  //text header is stored in "description" in templateOtion model
  var headerTemplateCol0 = '<div class="row"><div class="col-xs-12 col-sm-12 col-md-12 col-lg-12"><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control) + '<h2></div></div><hr/>';

  formlyModel.push(
                    {
                      template: typeof configurationModel.lines[lineIndex].columns[0].control.type !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'header' ? headerTemplateCol0 : '<div></div>') : '<div></div>'
                    }
                  );
}


function AddDatepickerPopupProperty(fieldToPush, configurationModel,lineIndex){
  fieldToPush.templateOptions.datepickerPopup = extractTemplateOptionDatepickerPopup(configurationModel.lines[lineIndex].columns[0].control);
}

function AddOneColumnControl(formlyModel, configurationModel,lineIndex){

    var fieldToPush =                       {
                        className: 'col-xs-12',
                        type: typeof configurationModel.lines[lineIndex].columns[0].control.type !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[0].control.type): 'blank',
                        key: typeof configurationModel.lines[lineIndex].columns[0].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[0].control.key : 'blank' + Date.now(),
                        templateOptions: {
                          type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[0].control),
                          label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[0].control),
                          required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[0].control),
                          placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[0].control),
                          description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control),
                          options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[0].control)
                        } 
                      };
    //////////////////////////////////////////////                  
    //datepicker additionnal particular property  
    //////////////////////////////////////////////                  
    if (configurationModel.lines[lineIndex].columns[0].control.type === 'datepicker') {
      AddDatepickerPopupProperty(fieldToPush, configurationModel,lineIndex);

      
    }     

    formlyModel.push( 
                      fieldToPush
                    );
}

function AddTwoColumnControl(formlyModel, configurationModel,lineIndex){


    //text header is stored in "description" in templateOtion model
    var headerTemplateCol0 =  {
                                className: 'col-xs-6',
                                template : '<div class="row"><div class=""><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control) + '<h2><hr/></div></div>'
                              };

    var headerTemplateCol1 =  {
                                className: 'col-xs-6',
                               template:'<div class="row"><div class=""><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control) + '<h2><hr/></div></div>'
                              };

  

    var controlCol0 =     {
                              className: 'col-xs-6',
                              type: typeof configurationModel.lines[lineIndex].columns[0].control.type !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[0].control.type): 'blank',
                              key: typeof configurationModel.lines[lineIndex].columns[0].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[0].control.key : 'blank' + Date.now(),
                              templateOptions: {
                                  type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[0].control),
                                  label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[0].control),
                                  required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[0].control),
                                  placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[0].control),
                                  description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control),
                                  options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[0].control)             
                              }
                            };
    //////////////////////////////////////////////                  
    //datepicker additionnal particular property  
    //////////////////////////////////////////////                  
    if (configurationModel.lines[lineIndex].columns[0].control.type === 'datepicker') {
      AddDatepickerPopupProperty(controlCol0, configurationModel,lineIndex);
    }                            


    var controlCol1 =  {
                              className: 'col-xs-6',
                              type: typeof configurationModel.lines[lineIndex].columns[1].control.type !== 'undefined' ?  (configurationModel.lines[lineIndex].columns[1].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[1].control.type) : 'blank',
                              key: typeof configurationModel.lines[lineIndex].columns[1].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[1].control.key : 'blank' + Date.now(),
                              templateOptions: {
                                  type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[1].control),
                                  label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[1].control),
                                  required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[1].control),
                                  placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[1].control),
                                  description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control),
                                  options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[1].control)             
                              }
                      };

    //////////////////////////////////////////////                  
    //datepicker additionnal particular property  
    //////////////////////////////////////////////                  
    if (configurationModel.lines[lineIndex].columns[1].control.type === 'datepicker') {
      AddDatepickerPopupProperty(controlCol1, configurationModel,lineIndex);
    }                                

    var FieldGroup = [];

    if (configurationModel.lines[lineIndex].columns[0].control.type === "header") {
      FieldGroup.push(headerTemplateCol0);
    }else{
      FieldGroup.push(controlCol0);
    }
     
    if (configurationModel.lines[lineIndex].columns[1].control.type === "header") {
      FieldGroup.push(headerTemplateCol1);
    }else{
      FieldGroup.push(controlCol1);
    }    



    formlyModel.push(
                       {
                          className: 'row', 
                          fieldGroup: FieldGroup
                        }
                    );
}

function AddThreeColumnControl(formlyModel, configurationModel,lineIndex){

    //text header is stored in "description" in templateOtion model
    var headerTemplateCol0 =  {
                                className: 'col-xs-4',
                                template : '<div class="row"><div class=""><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control) + '<h2><hr/></div></div>'
                              };

    var headerTemplateCol1 =  {
                                className: 'col-xs-4',
                               template:'<div class="row"><div class=""><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control) + '<h2><hr/></div></div>'
                              };

    var headerTemplateCol2 =  {
                                className: 'col-xs-4',
                               template:'<div class="row"><div class=""><h2 class="text-center">' + extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[2].control) + '<h2><hr/></div></div>'
                              };
  

    var controlCol0 =     {
                              className: 'col-xs-4',
                              type: typeof configurationModel.lines[lineIndex].columns[0].control.type !== 'undefined' ? (configurationModel.lines[lineIndex].columns[0].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[0].control.type): 'blank',
                              key: typeof configurationModel.lines[lineIndex].columns[0].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[0].control.key : 'blank' + Date.now(),
                              templateOptions: {
                                  type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[0].control),
                                  label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[0].control),
                                  required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[0].control),
                                  placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[0].control),
                                  description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[0].control),
                                  options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[0].control)             
                              }
                            };
    //////////////////////////////////////////////                  
    //datepicker additionnal particular property  
    //////////////////////////////////////////////                  
    if (configurationModel.lines[lineIndex].columns[0].control.type === 'datepicker') {
      AddDatepickerPopupProperty(controlCol0, configurationModel,lineIndex);
    }                             

    var controlCol1 =  {
                              className: 'col-xs-4',
                              type: typeof configurationModel.lines[lineIndex].columns[1].control.type !== 'undefined' ?  (configurationModel.lines[lineIndex].columns[1].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[1].control.type) : 'blank',
                              key: typeof configurationModel.lines[lineIndex].columns[1].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[1].control.key : 'blank' + Date.now(),
                              templateOptions: {
                                  type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[1].control),
                                  label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[1].control),
                                  required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[1].control),
                                  placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[1].control),
                                  description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[1].control),
                                  options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[1].control)             
                              }
                      };
    //////////////////////////////////////////////                  
    //datepicker additionnal particular property  
    //////////////////////////////////////////////                  
    if (configurationModel.lines[lineIndex].columns[1].control.type === 'datepicker') {
      AddDatepickerPopupProperty(controlCol1, configurationModel,lineIndex);
    }                       
    var controlCol2 =  {
                              className: 'col-xs-4',
                              type: typeof configurationModel.lines[lineIndex].columns[2].control.type !== 'undefined' ?  (configurationModel.lines[lineIndex].columns[2].control.type === 'none' ? 'blank': configurationModel.lines[lineIndex].columns[2].control.type) : 'blank',
                              key: typeof configurationModel.lines[lineIndex].columns[2].control.key !== 'undefined' ?  configurationModel.lines[lineIndex].columns[2].control.key : 'blank' + Date.now(),
                              templateOptions: {
                                  type: extractTemplateOptionType(configurationModel.lines[lineIndex].columns[2].control),
                                  label: extractTemplateOptionLabel(configurationModel.lines[lineIndex].columns[2].control),
                                  required : extractTemplateOptionRequired(configurationModel.lines[lineIndex].columns[2].control),
                                  placeholder : extractTemplateOptionPlaceholder(configurationModel.lines[lineIndex].columns[2].control),
                                  description : extractTemplateOptionDescription(configurationModel.lines[lineIndex].columns[2].control),
                                  options : extractTemplateOptionOptions(configurationModel.lines[lineIndex].columns[2].control)             
                              }
                      };
    //////////////////////////////////////////////                  
    //datepicker additionnal particular property  
    //////////////////////////////////////////////                  
    if (configurationModel.lines[lineIndex].columns[2].control.type === 'datepicker') {
      AddDatepickerPopupProperty(controlCol2, configurationModel,lineIndex);
    }     

    var FieldGroup = [];

    if (configurationModel.lines[lineIndex].columns[0].control.type === "header") {
      FieldGroup.push(headerTemplateCol0);
    }else{
      FieldGroup.push(controlCol0);
    }
     
    if (configurationModel.lines[lineIndex].columns[1].control.type === "header") {
      FieldGroup.push(headerTemplateCol1);
    }else{
      FieldGroup.push(controlCol1);
    }    

    if (configurationModel.lines[lineIndex].columns[2].control.type === "header") {
      FieldGroup.push(headerTemplateCol2);
    }else{
      FieldGroup.push(controlCol2);
    }    


    formlyModel.push(
                       {
                          className: 'row', 
                          fieldGroup: FieldGroup
                        }
                    );
}


function isTemplateOptionDefined(obj){
  return typeof obj.templateOptions !== 'undefined' ? true : false;
}

function extractTemplateOptionLabel(obj){

 //console.info('extractTemplateOptionLabel');
 //console.dir(obj);
 return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.label !== 'undefined'? obj.templateOptions.label: '') : '';
}


function extractTemplateOptionDatepickerPopup(obj){
  return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.datepickerPopup !== 'undefined'? obj.templateOptions.datepickerPopup: '') : '';
}

function extractTemplateOptionRequired(obj){
  return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.required !== 'undefined'? obj.templateOptions.required: '') : '';
}
//radio and select
function extractTemplateOptionOptions(obj){
  return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.options !== 'undefined'? obj.templateOptions.options: '') : '';
}



function extractTemplateOptionType(obj){
  return  typeof obj.subtype !== 'undefined'? obj.subtype: '';
}

function extractTemplateOptionPlaceholder(obj){
  return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.placeholder !== 'undefined'? obj.templateOptions.placeholder: '') : '';
}

function extractTemplateOptionDescription(obj){
  return  typeof obj.templateOptions !== 'undefined' ? (typeof obj.templateOptions.description !== 'undefined'? obj.templateOptions.description: '') : '';
}


/////////////////////////////////////////
// formly model functions
/////////////////////////////////////////

function resetDataModel(obj){
  var emptyDataModel = {};
  angular.copy(emptyDataModel, obj);
  return true;
}

/////////////////////////////////////////
// custom errors
/////////////////////////////////////////

var messageObj = {
                      noError : false,
                      title: '',
                      Message: ''  
};

function getErrorObject(errorTitle, errorMessage){

  var messageObj = {
                        noError : false,
                        title: '',
                        Message: ''  
  };

  messageObj.noError = false;
  messageObj.title = errorTitle;
  messageObj.Message = errorMessage;
  return messageObj;
}

function getMessageObject(messageTitle, messageBody){
  var messageObj = {
                      noError : false,
                      title: '',
                      Message: ''  
  };

  messageObj.noError = true;
  messageObj.title = messageTitle;
  messageObj.Message = messageBody;
  return messageObj;
}
  
}]);






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// service to manage select options (used in modal to edit control)
//
//  module = "service"  selectOptionManage (manage : selects, radio...)
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.services.serviceNAME" = container services module
//
//  This module is a service -> it must be injected in services container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var selectOptionManage = angular.module('ngwfApp.services.selectOptionManage', []);


selectOptionManage.factory('selectOptionManage', [ function(){
	console.log('--> INIT : Hello service  \'\'selectOptionManage\'\' ');

    return {
            testMe: function() {
                return "selectOptionManage is here.";
            },

            initModel: function(selectObj){
              resetModel(selectObj);
            },
        
            isOptionUnique: function(selectObj, textValue){
              for (var i = selectObj.rows.length - 1; i >= 0; i--) {

                if (selectObj.rows[i].option === textValue) {
                  return false;
                }
                
              }
              return true;
            },

            //test if not empty string (= full space string is not conidered as valid)
            isOptionValidFormat: function(textValue){
              if (textValue !== "") {
                return true;
              }
              return false;                    
            },

            addNewOptionRadio: function(selectObj, newOptionText){
              var fullResponse = {
                                    resultFlag : false,
                                    details : ""
                                  };

              var checkResult = validOption(selectObj, newOptionText);  

              console.info(checkResult);

              if (checkResult.resultFlag === true){

                  var newOption = {
                                      option: newOptionText,
                                      order: selectObj.rows.length
                                  };

                  selectObj.rows.push(newOption);
                  fullResponse.resultFlag = true;
                  fullResponse.details = "";
                  return fullResponse;
              }else{

                    angular.copy(checkResult, fullResponse);                    
                    return fullResponse;                        
              }


            },


            addNewOptionBasicSelect: function(selectObj, newOptionText){
              var fullResponse = {
                                    resultFlag : false,
                                    details : ""
                                  };

              var checkResult = validOption(selectObj, newOptionText);  

              console.info(checkResult);

              if (checkResult.resultFlag === true){

                  var newOption = {
                                      option: newOptionText,
                                      order: selectObj.rows.length
                                  };

                  selectObj.rows.push(newOption);
                  fullResponse.resultFlag = true;
                  fullResponse.details = "";
                  return fullResponse;
              }else{

                    angular.copy(checkResult, fullResponse);                    
                    return fullResponse;                        
              }


            },

            addNewOptionGroupedSelect: function(selectObj, newOptionText, newOptionGroup){
              var fullResponse = {
                                    resultFlag : false,
                                    details : ""
                                  };

              // if (typeof newOptionGroup === "undefined") {

              //     fullResponse.resultFlag = false;
              //     fullResponse.details = "Group option is undefined";
              //     return fullResponse;
              // }

              // if (newOptionGroup === "") {

              //     fullResponse.resultFlag = false;
              //     fullResponse.details = "Group option is undefined";
              //     return fullResponse;
              // }

              var checkResult = validOption(selectObj, newOptionText);  

          
              if (checkResult.resultFlag === true){

                  var newOption = {
                                      option: newOptionText,
                                      group: newOptionGroup,
                                      order: selectObj.rows.length
                                  };

                  selectObj.rows.push(newOption);
                  fullResponse.resultFlag = true;
                  fullResponse.details = "";
                  return fullResponse;
              }else{

                    angular.copy(checkResult, fullResponse);                    
                    return fullResponse;                        
              }

            },


            removeOption:  function(selectObj, AtIndex) {
              var fullResponse = {
                                  resultFlag : false,
                                  details : ""
                                };

              if (AtIndex !== -1) {
                  selectObj.rows.splice(AtIndex, 1);
                  fullResponse.resultFlag = true;
                  fullResponse.details= "";
                  return fullResponse;
              }else{
                  fullResponse.resultFlag = false;
                  fullResponse.details= "Option index not valid";
                  return fullResponse;
              }
            },

            upthisOption : function(selectObj, indexOption){
              var fullResponse = {
                                  resultFlag : false,
                                  details : ""
                                };  

              if (indexOption > -1) {

                if (indexOption > 0) {

                  if (selectObj.rows[indexOption - 1]) {
                    var currentOption = selectObj.rows[indexOption];
                    selectObj.rows.splice(indexOption , 1);
                    selectObj.rows.splice((indexOption - 1), 0, currentOption); 

                    fullResponse.resultFlag = true;
                    fullResponse.details = "";
                    return fullResponse;
                  }else{
                    fullResponse.resultFlag = false;
                    fullResponse.details = "Can't retreive option from option index";
                    return fullResponse;
                  }
                }else{
                    fullResponse.resultFlag = true;
                    fullResponse.details = "";
                    return fullResponse;
                }  

              }else{
                fullResponse.resultFlag = false;
                fullResponse.details = "Option index not valid";
                return fullResponse;
              }
          },

          downthisOption : function(selectObj, indexOption){
              var fullResponse = {
                                  resultFlag : false,
                                  details : ""
                                };

              if (indexOption > -1) {
  

                if (indexOption < selectObj.rows.length - 1){
                  

                  if (selectObj.rows[indexOption + 1]) {
                    

                    var currentOption = selectObj.rows[indexOption];
                    
                    selectObj.rows.splice(indexOption , 1);
                    selectObj.rows.splice((indexOption + 1), 0, currentOption);  

                    fullResponse.resultFlag = true;
                    fullResponse.details = "";
                    return fullResponse;  

                  }else{
                    fullResponse.resultFlag = false;
                    fullResponse.details = "Can't retreive option from option index";
                    return fullResponse;
                  }
                }else{

                  
                    fullResponse.resultFlag = true;
                    fullResponse.details = "";
                  return fullResponse;
                }


              }else{
                fullResponse.resultFlag = false;
                fullResponse.details = "Option index not valid";
                return fullResponse;
              }

          }

      



        };




function validOption(selectObj, newOptionText){
    var fullResponse = {
                          resultFlag : false,
                          details : ""
                        };

    if (typeof newOptionText === 'undefined') {
        fullResponse.resultFlag = false;
        fullResponse.details = "Entered option is empty";
        return fullResponse;
    }

    if (newOptionText !== "") {
          for (var i = selectObj.rows.length - 1; i >= 0; i--) {
            if (selectObj.rows[i].option === newOptionText) {
              fullResponse.resultFlag = false;
              fullResponse.details = "Entered option is not unique";
              return fullResponse;
            }
          }
          fullResponse.resultFlag = true;
          fullResponse.details = "";
          return fullResponse;
    }
    fullResponse.resultFlag = false;     
    fullResponse.details = "Entered option is empty";
    return fullResponse;
}

function resetModel(selectObj){
  var zeroModel = { 
                      rows:
                      [
                      ]
                    };

  
  angular.copy(zeroModel, selectObj);
}

// //model like :
// var initFortest = {rows:[
//                                       {"order":0, option:"option 1"},
//                                       {"order":1, option:"option 1"},
//                                       {"order":2, option:"option 2"},
//                                       {"order":3, option:"option 3"},
//                                       {"order":4, option:"option 4"},
//                                       {"order":5, option:"option 5"},
//                                       {"order":6, option:"option 6"},
//                                       {"order":7, option:"option 7"},
//                                       {"order":8, option:"option 8"},
//                                       {"order":9, option:"option 9"},
//                                       {"order":10, option:"option 10"},
//                                       {"order":11, option:"option 11"}
//                                     ]
//                   };

}]);






///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// module = "services" container
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.services" = container services module
//
//  This module is a container -> it must be injected in the application -> so it will inject all services injected here
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
angular.module('ngwfApp.services', [	'ngwfApp.services.formFieldManage',
										'ngwfApp.services.selectOptionManage',
										'ngwfApp.services.ngwfWfFormsServices',
										'ngwfApp.services.ngwfEditCtrlControllerModalProxy',
										function () {
    //verbose
    console.log('--> INIT : Hello services container  \'\'ngwfApp.services\'\' ');
}]);
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  form API : suppose you have your RESTful backend 
//
//  module = "service"  for view "wfEdit"
//  ------------------------------------------------------
//      Syntax (convention) :
//          "ngwfApp" = application
//          "ngwfApp.services.serviceNAME" = container services module
//
//  This module is a service -> it must be injected in services container
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var ngwfWfFormsServices = angular.module('ngwfApp.services.ngwfWfFormsServices', ['ngResource']);


ngwfWfFormsServices.factory('wfFormsByIdServices', ['$resource', function($resource){
    return $resource('/api/wfedit/:id', {id: '@id'}, {

    });
  }]);


})();